[
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-mem/version/master", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-mem:master", 
                "meta-version": "2015-11-12 22:45:34.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-mem/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: bwa mem [options] <idxbase> <in1.fq> [in2.fq]\n\n  Algorithm options:\n         -w INT        band width for banded alignment [100]\n         -d INT        off-diagonal X-dropoff [100]\n         -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]\n         -y INT        seed occurrence for the 3rd round seeding [20]\n         -c INT        skip seeds with more than INT occurrences [500]\n         -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]\n         -W INT        discard a chain if seeded bases shorter than INT [0]\n         -m INT        perform at most INT rounds of mate rescues for each read [50]\n         -S            skip mate rescue\n         -P            skip pairing; mate rescue performed unless -S also in use\n         -e            discard full-length exact matches\n\n  Scoring options:\n\n         -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]\n         -B INT        penalty for a mismatch [4]\n         -O INT[,INT]  gap open penalties for deletions and insertions [6,6]\n         -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]\n         -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]\n         -U INT        penalty for an unpaired read pair [17]\n\n         -x STR        read type. Setting -x changes multiple parameters unless overriden [null]\n                       pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)\n                       ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)\n                       intractg: -B9 -O16 -L5  (intra-species contigs to ref)\n\n  Input/output options:\n\n         -p            smart pairing (ignoring in2.fq)\n         -R STR        read group header line such as '@RG\\tID:foo\\tSM:bar' [null]\n         -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]\n         -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)\n\n         -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]\n         -T INT        minimum score to output [30]\n         -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]\n         -a            output all alignments for SE or unpaired PE\n         -C            append FASTA/FASTQ comment to SAM output\n         -V            output the reference FASTA header in the XR tag\n         -Y            use soft clipping for supplementary alignments\n         -M            mark shorter split hits as secondary\n\n         -I FLOAT[,FLOAT[,INT[,INT]]]\n                       specify the mean, standard deviation (10% of the mean if absent), max\n                       (4 sigma from the mean if absent) and min of the insert size distribution.\n                       FR orientation only. [inferred]\n\n  Note: Please read the man page for detailed description of the command line and options.\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-mem\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 2\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    description: \"-t INT        number of threads [1]\"\n    inputBinding:\n      position: 1\n      prefix: \"-t\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nstdout:\n  engine: cwl:JsonPointer\n  script: /job/output_name\n\nbaseCommand: [\"bwa\", \"mem\"]\n\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-mem/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.7.12\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"mem\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-mem/version/latest", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-mem:latest", 
                "meta-version": "2015-11-12 22:45:35.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-mem/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: bwa mem [options] <idxbase> <in1.fq> [in2.fq]\n\n  Algorithm options:\n         -w INT        band width for banded alignment [100]\n         -d INT        off-diagonal X-dropoff [100]\n         -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]\n         -y INT        seed occurrence for the 3rd round seeding [20]\n         -c INT        skip seeds with more than INT occurrences [500]\n         -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]\n         -W INT        discard a chain if seeded bases shorter than INT [0]\n         -m INT        perform at most INT rounds of mate rescues for each read [50]\n         -S            skip mate rescue\n         -P            skip pairing; mate rescue performed unless -S also in use\n         -e            discard full-length exact matches\n\n  Scoring options:\n\n         -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]\n         -B INT        penalty for a mismatch [4]\n         -O INT[,INT]  gap open penalties for deletions and insertions [6,6]\n         -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]\n         -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]\n         -U INT        penalty for an unpaired read pair [17]\n\n         -x STR        read type. Setting -x changes multiple parameters unless overriden [null]\n                       pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)\n                       ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)\n                       intractg: -B9 -O16 -L5  (intra-species contigs to ref)\n\n  Input/output options:\n\n         -p            smart pairing (ignoring in2.fq)\n         -R STR        read group header line such as '@RG\\tID:foo\\tSM:bar' [null]\n         -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]\n         -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)\n\n         -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]\n         -T INT        minimum score to output [30]\n         -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]\n         -a            output all alignments for SE or unpaired PE\n         -C            append FASTA/FASTQ comment to SAM output\n         -V            output the reference FASTA header in the XR tag\n         -Y            use soft clipping for supplementary alignments\n         -M            mark shorter split hits as secondary\n\n         -I FLOAT[,FLOAT[,INT[,INT]]]\n                       specify the mean, standard deviation (10% of the mean if absent), max\n                       (4 sigma from the mean if absent) and min of the insert size distribution.\n                       FR orientation only. [inferred]\n\n  Note: Please read the man page for detailed description of the command line and options.\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-mem\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 2\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    description: \"-t INT        number of threads [1]\"\n    inputBinding:\n      position: 1\n      prefix: \"-t\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nstdout:\n  engine: cwl:JsonPointer\n  script: /job/output_name\n\nbaseCommand: [\"bwa\", \"mem\"]\n\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-mem/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.7.12\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"mem\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-bwa-mem", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-mem", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/dockstore-tool-bwa-mem", 
        "description": "Usage: bwa mem [options] <idxbase> <in1.fq> [in2.fq]\n\nAlgorithm options:\n       -w INT        band width for banded alignment [100]\n       -d INT        off-diagonal X-dropoff [100]\n       -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]\n       -y INT        seed occurrence for the 3rd round seeding [20]\n       -c INT        skip seeds with more than INT occurrences [500]\n       -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]\n       -W INT        discard a chain if seeded bases shorter than INT [0]\n       -m INT        perform at most INT rounds of mate rescues for each read [50]\n       -S            skip mate rescue\n       -P            skip pairing; mate rescue performed unless -S also in use\n       -e            discard full-length exact matches\n\nScoring options:\n\n       -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]\n       -B INT        penalty for a mismatch [4]\n       -O INT[,INT]  gap open penalties for deletions and insertions [6,6]\n       -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]\n       -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]\n       -U INT        penalty for an unpaired read pair [17]\n\n       -x STR        read type. Setting -x changes multiple parameters unless overriden [null]\n                     pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)\n                     ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)\n                     intractg: -B9 -O16 -L5  (intra-species contigs to ref)\n\nInput/output options:\n\n       -p            smart pairing (ignoring in2.fq)\n       -R STR        read group header line such as '@RG\\tID:foo\\tSM:bar' [null]\n       -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]\n       -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)\n\n       -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]\n       -T INT        minimum score to output [30]\n       -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]\n       -a            output all alignments for SE or unpaired PE\n       -C            append FASTA/FASTQ comment to SAM output\n       -V            output the reference FASTA header in the XR tag\n       -Y            use soft clipping for supplementary alignments\n       -M            mark shorter split hits as secondary\n\n       -I FLOAT[,FLOAT[,INT[,INT]]]\n                     specify the mean, standard deviation (10% of the mean if absent), max\n                     (4 sigma from the mean if absent) and min of the insert size distribution.\n                     FR orientation only. [inferred]\n\nNote: Please read the man page for detailed description of the command line and options."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-aln/version/master", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-aln:master", 
                "meta-version": "2015-11-12 22:46:03.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-aln/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage:   bwa aln [options] <prefix> <in.fq>\n\n  Options: -n NUM    max #diff (int) or missing prob under 0.02 err rate (float) [0.04]\n           -o INT    maximum number or fraction of gap opens [1]\n           -e INT    maximum number of gap extensions, -1 for disabling long gaps [-1]\n           -i INT    do not put an indel within INT bp towards the ends [5]\n           -d INT    maximum occurrences for extending a long deletion [10]\n           -l INT    seed length [32]\n           -k INT    maximum differences in the seed [2]\n           -m INT    maximum entries in the queue [2000000]\n           -t INT    number of threads [1]\n           -M INT    mismatch penalty [3]\n           -O INT    gap open penalty [11]\n           -E INT    gap extension penalty [4]\n           -R INT    stop searching when there are >INT equally best hits [30]\n           -q INT    quality threshold for read trimming down to 35bp [0]\n           -f FILE   file to write output to instead of stdout\n           -B INT    length of barcode\n           -c        input sequences are in the color space\n           -L        log-scaled gap penalty for long deletions\n           -N        non-iterative mode: search for all n-difference hits (slooow)\n           -I        the input is in the Illumina 1.3+ FASTQ-like format\n           -b        the input read file is in the BAM format\n           -0        use single-end reads only (effective with -b)\n           -1        use the 1st read in a pair (effective with -b)\n           -2        use the 2nd read in a pair (effective with -b)\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-aln\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 4\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 5\n      prefix: \"-f\"\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    inputBinding:\n      position: 1\n      prefix: \"-t\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"bwa\",\"aln\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-aln/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Andrey V Kartashov \"porter@porter.st\"\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.5.9\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"aln\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-aln/version/latest", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-aln:latest", 
                "meta-version": "2015-11-12 22:46:03.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-aln/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage:   bwa aln [options] <prefix> <in.fq>\n\n  Options: -n NUM    max #diff (int) or missing prob under 0.02 err rate (float) [0.04]\n           -o INT    maximum number or fraction of gap opens [1]\n           -e INT    maximum number of gap extensions, -1 for disabling long gaps [-1]\n           -i INT    do not put an indel within INT bp towards the ends [5]\n           -d INT    maximum occurrences for extending a long deletion [10]\n           -l INT    seed length [32]\n           -k INT    maximum differences in the seed [2]\n           -m INT    maximum entries in the queue [2000000]\n           -t INT    number of threads [1]\n           -M INT    mismatch penalty [3]\n           -O INT    gap open penalty [11]\n           -E INT    gap extension penalty [4]\n           -R INT    stop searching when there are >INT equally best hits [30]\n           -q INT    quality threshold for read trimming down to 35bp [0]\n           -f FILE   file to write output to instead of stdout\n           -B INT    length of barcode\n           -c        input sequences are in the color space\n           -L        log-scaled gap penalty for long deletions\n           -N        non-iterative mode: search for all n-difference hits (slooow)\n           -I        the input is in the Illumina 1.3+ FASTQ-like format\n           -b        the input read file is in the BAM format\n           -0        use single-end reads only (effective with -b)\n           -1        use the 1st read in a pair (effective with -b)\n           -2        use the 2nd read in a pair (effective with -b)\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-aln\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 4\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 5\n      prefix: \"-f\"\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    inputBinding:\n      position: 1\n      prefix: \"-t\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"bwa\",\"aln\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-aln/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Andrey V Kartashov \"porter@porter.st\"\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.5.9\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"aln\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-bwa-aln", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-aln", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/dockstore-tool-bwa-aln", 
        "description": "Usage:   bwa aln [options] <prefix> <in.fq>\n\nOptions: -n NUM    max #diff (int) or missing prob under 0.02 err rate (float) [0.04]\n         -o INT    maximum number or fraction of gap opens [1]\n         -e INT    maximum number of gap extensions, -1 for disabling long gaps [-1]\n         -i INT    do not put an indel within INT bp towards the ends [5]\n         -d INT    maximum occurrences for extending a long deletion [10]\n         -l INT    seed length [32]\n         -k INT    maximum differences in the seed [2]\n         -m INT    maximum entries in the queue [2000000]\n         -t INT    number of threads [1]\n         -M INT    mismatch penalty [3]\n         -O INT    gap open penalty [11]\n         -E INT    gap extension penalty [4]\n         -R INT    stop searching when there are >INT equally best hits [30]\n         -q INT    quality threshold for read trimming down to 35bp [0]\n         -f FILE   file to write output to instead of stdout\n         -B INT    length of barcode\n         -c        input sequences are in the color space\n         -L        log-scaled gap penalty for long deletions\n         -N        non-iterative mode: search for all n-difference hits (slooow)\n         -I        the input is in the Illumina 1.3+ FASTQ-like format\n         -b        the input read file is in the BAM format\n         -0        use single-end reads only (effective with -b)\n         -1        use the 1st read in a pair (effective with -b)\n         -2        use the 2nd read in a pair (effective with -b)"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-linux-sort/version/master", 
                "image": "quay.io/collaboratory/dockstore-tool-linux-sort:master", 
                "meta-version": "2016-01-15 16:09:01.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: sort [OPTION]... [FILE]...\n    or:  sort [OPTION]... --files0-from=F\n  Write sorted concatenation of all FILE(s) to standard output.\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-linux-sort\n\ninputs:\n  - id: \"#input\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 4\n  \n  - id: \"#output\"\n    type: string\n\n  - id: \"#key\"\n    type: \n      type: array\n      items: string \n      inputBinding:\n        prefix: \"-k\"\n    inputBinding:\n      position: 1\n    description: |\n      -k, --key=POS1[,POS2]\n      start a key at POS1, end it at POS2 (origin 1)\n\nstdout: $(inputs.output)\n\noutputs:\n  - id: \"#sorted\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding: \n      glob: $(inputs.output)\n\nbaseCommand: [\"sort\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nCMD [\"sort\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-linux-sort/version/latest", 
                "image": "quay.io/collaboratory/dockstore-tool-linux-sort:latest", 
                "meta-version": "2016-01-15 16:09:03.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: sort [OPTION]... [FILE]...\n    or:  sort [OPTION]... --files0-from=F\n  Write sorted concatenation of all FILE(s) to standard output.\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-linux-sort\n\ninputs:\n  - id: \"#input\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 4\n  \n  - id: \"#output\"\n    type: string\n\n  - id: \"#key\"\n    type: \n      type: array\n      items: string \n      inputBinding:\n        prefix: \"-k\"\n    inputBinding:\n      position: 1\n    description: |\n      -k, --key=POS1[,POS2]\n      start a key at POS1, end it at POS2 (origin 1)\n\nstdout: $(inputs.output)\n\noutputs:\n  - id: \"#sorted\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding: \n      glob: $(inputs.output)\n\nbaseCommand: [\"sort\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nCMD [\"sort\"]\n"
                }
            }, 
            {
                "name": "draft3", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-linux-sort/version/draft3", 
                "image": "quay.io/collaboratory/dockstore-tool-linux-sort:draft3", 
                "meta-version": "2016-01-15 16:53:41.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/draft3/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: sort [OPTION]... [FILE]...\n    or:  sort [OPTION]... --files0-from=F\n  Write sorted concatenation of all FILE(s) to standard output.\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-linux-sort\n\ninputs:\n  - id: \"#input\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 4\n  \n  - id: \"#output\"\n    type: string\n\n  - id: \"#key\"\n    type: \n      type: array\n      items: string \n      inputBinding:\n        prefix: \"-k\"\n    inputBinding:\n      position: 1\n    description: |\n      -k, --key=POS1[,POS2]\n      start a key at POS1, end it at POS2 (origin 1)\n\nstdout: $(inputs.output)\n\noutputs:\n  - id: \"#sorted\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding: \n      glob: $(inputs.output)\n\nbaseCommand: [\"sort\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-linux-sort/draft3/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nCMD [\"sort\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-linux-sort", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-linux-sort", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/dockstore-tool-linux-sort", 
        "description": "Usage: sort [OPTION]... [FILE]...\n  or:  sort [OPTION]... --files0-from=F\nWrite sorted concatenation of all FILE(s) to standard output."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-samse/version/master", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-samse:master", 
                "meta-version": "2015-11-12 22:54:06.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-samse/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: bwa samse [-n max_occ] [-f out.sam] [-r RG_line] <prefix> <in.sai> <in.fq>\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-samse\n\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 4\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n  - id: \"#insai\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#infq\"\n    type: File\n    inputBinding:\n      position: 6\n\n  - id: \"#outsam\"\n    type: string\n    inputBinding:\n      position: 1\n      prefix: \"-f\"\n\n  - id: \"#max_occ\"\n    type: [\"null\", int ]\n    description: |\n      Maximum number of alignments to output in the XA tag for reads paired properly. If a read has more than INT hits, the XA tag will not be written. [3]\n    inputBinding:\n      position: 1\n      prefix: \"-n\"\n\n  - id: \"#RG_line\"\n    type: [\"null\", string ]\n    description: |\n      Specify the read group in a format like `@RG\\tID:foo\\tSM:bar'. [null]\n    inputBinding:\n      position: 1\n      prefix: \"-r\"\n\noutputs:\n  - id: \"#aligned\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/outsam\n\nbaseCommand: [\"bwa\",\"samse\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-samse/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.7.12\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"samse\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-samse/version/latest", 
                "image": "quay.io/collaboratory/dockstore-tool-bwa-samse:latest", 
                "meta-version": "2015-11-12 22:54:07.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-samse/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage: bwa samse [-n max_occ] [-f out.sam] [-r RG_line] <prefix> <in.sai> <in.fq>\n\ndct:contributor:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-bwa-samse\n\n\ninputs:\n  - id: \"#prefix\"\n    type: File\n    inputBinding:\n      position: 4\n      secondaryFiles:\n        - engine: \"#node-engine\"\n          script: |\n           {\n            if ((/.*\\.fa$/i).test($job['prefix'].path))\n               return [\n                       {\"path\": $job['prefix'].path+\".amb\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".ann\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".pac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rpac\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".bwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rbwt\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".sa\", \"class\": \"File\"},\n                       {\"path\": $job['prefix'].path+\".rsa\", \"class\": \"File\"}\n                      ];\n            return [];\n           }\n\n  - id: \"#insai\"\n    type: File\n    inputBinding:\n      position: 5\n\n  - id: \"#infq\"\n    type: File\n    inputBinding:\n      position: 6\n\n  - id: \"#outsam\"\n    type: string\n    inputBinding:\n      position: 1\n      prefix: \"-f\"\n\n  - id: \"#max_occ\"\n    type: [\"null\", int ]\n    description: |\n      Maximum number of alignments to output in the XA tag for reads paired properly. If a read has more than INT hits, the XA tag will not be written. [3]\n    inputBinding:\n      position: 1\n      prefix: \"-n\"\n\n  - id: \"#RG_line\"\n    type: [\"null\", string ]\n    description: |\n      Specify the read group in a format like `@RG\\tID:foo\\tSM:bar'. [null]\n    inputBinding:\n      position: 1\n      prefix: \"-r\"\n\noutputs:\n  - id: \"#aligned\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/outsam\n\nbaseCommand: [\"bwa\",\"samse\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bwa-samse/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\nMAINTAINER Collaboratory@OICR \nENV VERSION=0.7.12\nENV NAME=bwa\nENV URL=https://github.com/lh3/bwa/archive/${VERSION}.tar.gz\nRUN apt-get update && apt-get install -y wget make g++ zlib1g-dev python\nRUN wget -q -O ${NAME}.tar.gz $URL \nRUN tar -zxvf ${NAME}.tar.gz \nWORKDIR /${NAME}-${VERSION} \nRUN make -j 4 \nWORKDIR /\nRUN cp ./${NAME}-${VERSION}/${NAME} ./ \nRUN strip ${NAME}\nENV PATH /:$PATH\nCMD [\"bwa\", \"samse\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-bwa-samse", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-bwa-samse", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/dockstore-tool-bwa-samse", 
        "description": "Usage: bwa samse [-n max_occ] [-f out.sam] [-r RG_line] <prefix> <in.sai> <in.fq>"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-bedgraph-bigwig/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-bedgraph-bigwig:master", 
                "meta-version": "2015-11-12 22:49:49.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bedgraph-bigwig/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Convert a bedGraph file to bigWig format (see also http://www.ncbi.nlm.nih.gov/pubmed/20639541 )\n\n  usage:\n     bedGraphToBigWig in.bedGraph chrom.sizes out.bw\n     \n  where in.bedGraph is a four column file in the format:\n        <chrom> <start> <end> <value>\n  and chrom.sizes is a two-column file/URL: <chromosome name> <size in bases>\n  and out.bw is the output indexed big wig file.\n  If the assembly <db> is hosted by UCSC, chrom.sizes can be a URL like\n    http://hgdownload.cse.ucsc.edu/goldenPath/<db>/bigZips/<db>.chrom.sizes\n  or you may use the script fetchChromSizes to download the chrom.sizes file.\n  If not hosted by UCSC, a chrom.sizes file can be generated by running\n  twoBitInfo on the assembly .2bit file.\n  The input bedGraph file must be sorted, use the unix sort command:\n    sort -k1,1 -k2,2n unsorted.bedGraph > sorted.bedGraph\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-bedgraph-bigwig\"\n  - { import: node-engine.cwl }\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\ninputs:\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 2\n\n  - id: \"#genomeFile\"\n    type: File\n    inputBinding:\n      position: 3\n\n  - id: \"#bigWig\"\n    type: string\n    inputBinding:\n      position: 4\n\n  - id: \"#unc\"\n    type: [\"null\",boolean]\n    description: \"If set, do not use compression.\"\n    inputBinding:\n      position: 1\n      prefix: \"-unc\"\n\n  - id: \"#itemsPerSlot\"\n    type: [\"null\",int]\n    description: |\n      -itemsPerSlot=N - Number of data points bundled at lowest level. Default 1024\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-itemsPerSlot=\"\n\n  - id: \"#blockSize\"\n    type: [\"null\",int]\n    description: |\n      -blockSize=N - Number of items to bundle in r-tree.  Default 256\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-blockSize=\"\n\noutputs:\n  - id: \"#bigWigOut\"\n    type: File\n    outputBinding:\n      glob: \n        engine: cwl:JsonPointer\n        script: /job/bigWig\n\nbaseCommand: [\"bedGraphToBigWig\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bedgraph-bigwig/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nRUN  apt-get update \\\n  && apt-get install -y wget\n\nRUN apt-get install -y libpng-dev \\\n  && apt-get install -y libkrb5-dev\n\nRUN  wget -q -O /usr/local/bin/bedGraphToBigWig  http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nRUN  chmod a+x /usr/local/bin/bedGraphToBigWig\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-bedgraph-bigwig/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-bedgraph-bigwig:latest", 
                "meta-version": "2015-11-12 22:49:50.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bedgraph-bigwig/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Convert a bedGraph file to bigWig format (see also http://www.ncbi.nlm.nih.gov/pubmed/20639541 )\n\n  usage:\n     bedGraphToBigWig in.bedGraph chrom.sizes out.bw\n     \n  where in.bedGraph is a four column file in the format:\n        <chrom> <start> <end> <value>\n  and chrom.sizes is a two-column file/URL: <chromosome name> <size in bases>\n  and out.bw is the output indexed big wig file.\n  If the assembly <db> is hosted by UCSC, chrom.sizes can be a URL like\n    http://hgdownload.cse.ucsc.edu/goldenPath/<db>/bigZips/<db>.chrom.sizes\n  or you may use the script fetchChromSizes to download the chrom.sizes file.\n  If not hosted by UCSC, a chrom.sizes file can be generated by running\n  twoBitInfo on the assembly .2bit file.\n  The input bedGraph file must be sorted, use the unix sort command:\n    sort -k1,1 -k2,2n unsorted.bedGraph > sorted.bedGraph\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-bedgraph-bigwig\"\n  - { import: node-engine.cwl }\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\ninputs:\n  - id: \"#input\"\n    type: File\n    inputBinding:\n      position: 2\n\n  - id: \"#genomeFile\"\n    type: File\n    inputBinding:\n      position: 3\n\n  - id: \"#bigWig\"\n    type: string\n    inputBinding:\n      position: 4\n\n  - id: \"#unc\"\n    type: [\"null\",boolean]\n    description: \"If set, do not use compression.\"\n    inputBinding:\n      position: 1\n      prefix: \"-unc\"\n\n  - id: \"#itemsPerSlot\"\n    type: [\"null\",int]\n    description: |\n      -itemsPerSlot=N - Number of data points bundled at lowest level. Default 1024\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-itemsPerSlot=\"\n\n  - id: \"#blockSize\"\n    type: [\"null\",int]\n    description: |\n      -blockSize=N - Number of items to bundle in r-tree.  Default 256\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-blockSize=\"\n\noutputs:\n  - id: \"#bigWigOut\"\n    type: File\n    outputBinding:\n      glob: \n        engine: cwl:JsonPointer\n        script: /job/bigWig\n\nbaseCommand: [\"bedGraphToBigWig\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-bedgraph-bigwig/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nRUN  apt-get update \\\n  && apt-get install -y wget\n\nRUN apt-get install -y libpng-dev \\\n  && apt-get install -y libkrb5-dev\n\nRUN  wget -q -O /usr/local/bin/bedGraphToBigWig  http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nRUN  chmod a+x /usr/local/bin/bedGraphToBigWig\n"
                }
            }
        ], 
        "name": "dockstore-tool-bedgraph-bigwig", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-bedgraph-bigwig", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-bedgraph-bigwig", 
        "description": "Convert a bedGraph file to bigWig format (see also http://www.ncbi.nlm.nih.gov/pubmed/20639541 )\n\nusage:\n   bedGraphToBigWig in.bedGraph chrom.sizes out.bw\n   \nwhere in.bedGraph is a four column file in the format:\n      <chrom> <start> <end> <value>\nand chrom.sizes is a two-column file/URL: <chromosome name> <size in bases>\nand out.bw is the output indexed big wig file.\nIf the assembly <db> is hosted by UCSC, chrom.sizes can be a URL like\n  http://hgdownload.cse.ucsc.edu/goldenPath/<db>/bigZips/<db>.chrom.sizes\nor you may use the script fetchChromSizes to download the chrom.sizes file.\nIf not hosted by UCSC, a chrom.sizes file can be generated by running\ntwoBitInfo on the assembly .2bit file.\nThe input bedGraph file must be sorted, use the unix sort command:\n  sort -k1,1 -k2,2n unsorted.bedGraph > sorted.bedGraph"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-liftover/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-liftover:master", 
                "meta-version": "2015-12-04 16:12:10.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-liftover/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Move annotations from one assembly to another\n\n  usage:\n     liftOver oldFile map.chain newFile unMapped\n  oldFile and newFile are in bed format by default, but can be in GFF and\n  maybe eventually others with the appropriate flags below.\n  The map.chain file has the old genome as the target and the new genome\n  as the query.\n\n  ***********************************************************************\n  WARNING: liftOver was only designed to work between different\n           assemblies of the same organism. It may not do what you want\n           if you are lifting between different organisms. If there has\n           been a rearrangement in one of the species, the size of the\n           region being mapped may change dramatically after mapping.\n  ***********************************************************************\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-liftover\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#oldFile\"\n    type: File\n    inputBinding:\n      position: 2\n\n  - id: \"#mapChain\"\n    type: File\n    description: |\n      The map.chain file has the old genome as the target and the new genome\n      as the query.\n    inputBinding:\n      position: 3\n\n  - id: \"#newFile\"\n    type: string\n    inputBinding:\n      position: 4\n\n  - id: \"#unMapped\"\n    type: string\n    inputBinding:\n      position: 5\n\n  - id: \"#gff\"\n    type: [\"null\",boolean]\n    description: |\n      File is in gff/gtf format.  Note that the gff lines are converted\n       separately.  It would be good to have a separate check after this\n       that the lines that make up a gene model still make a plausible gene\n       after liftOver\n    inputBinding:\n      position: 1\n      prefix: \"-gff\"\n\n  - id: \"#genePred\"\n    type: [\"null\",boolean]\n    description: |\n      File is in genePred format\n    inputBinding:\n      position: 1\n      prefix: \"-genePred\"\n\n  - id: \"#sample\"\n    type: [\"null\",boolean]\n    description: |\n      File is in sample format\n    inputBinding:\n      position: 1\n      prefix: \"-sample\"\n\n  - id: \"#bedPlus\"\n    type: [\"null\",int]\n    description: |\n      =N - File is bed N+ format\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-bedPlus=\"\n\n  - id: \"#positions\"\n    type: [\"null\",boolean]\n    description: |\n      File is in browser \"position\" format\n    inputBinding:\n      position: 1\n      prefix: \"-positions\"\n\n  - id: \"#hasBin\"\n    type: [\"null\",boolean]\n    description: |\n      File has bin value (used only with -bedPlus)\n    inputBinding:\n      position: 1\n      prefix: \"-hasBin\"\n\n  - id: \"#minMatch\"\n    type: [\"null\",int]\n    description: |\n      -minMatch=0.N Minimum ratio of bases that must remap. Default 0.95\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-minMatch=\"\n\n  - id: \"#tab\"\n    type: [\"null\",boolean]\n    inputBinding:\n      position: 1\n      prefix: \"-tab\"\n\n  - id: \"#pslT\"\n    type: [\"null\",boolean]\n    description: |\n      File is in psl format, map target side only\n    inputBinding:\n      position: 1\n      prefix: \"-pslT\"\n\n  - id: \"#ends\"\n    type: [\"null\",int]\n    description: |\n      =N - Lift the first and last N bases of each record and combine the\n               result. This is useful for lifting large regions like BAC end pairs.\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-ends=\"\n\n  - id: \"#minBlocks\"\n    type: [\"null\",int]\n    description: |\n      .N Minimum ratio of alignment blocks or exons that must map\n                    (default 1.00)\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-minBlocks=\"\n\n  - id: \"#fudgeThick\"\n    type: [\"null\",boolean]\n    description: |\n      (bed 12 or 12+ only) If thickStart/thickEnd is not mapped,\n                    use the closest mapped base.  Recommended if using\n                    -minBlocks.\n    inputBinding:\n      position: 1\n      prefix: \"-fudgeThick\"\n\n  - id: \"#multiple\"\n    type: [\"null\",boolean]\n    description: |\n      Allow multiple output regions\n    inputBinding:\n      position: 1\n      prefix: \"-multiple\"\n\n  - id: \"#minChainT\"\n    type: [\"null\",int]\n    description: |\n      Minimum chain size in target/query, when mapping\n                             to multiple output regions (default 0, 0)\n    inputBinding:\n      position: 1\n      prefix: \"-minChainT\"\n\n  - id: \"#minChainQ\"\n    type: [\"null\",int]\n    description: |\n      Minimum chain size in target/query, when mapping\n                             to multiple output regions (default 0, 0)\n    inputBinding:\n      position: 1\n      prefix: \"-minChainQ\"\n\n  - id: \"#minSizeQ\"\n    type: [\"null\",int]\n    description: |\n      Min matching region size in query with -multiple.\n    inputBinding:\n      position: 1\n      prefix: \"-minSizeQ\"\n\n  - id: \"#chainTable\"\n    type: [\"null\",string]\n    description: |\n      Min matching region size in query with -multiple.\n    inputBinding:\n      position: 1\n      prefix: \"-chainTable\"\n\n\noutputs:\n  - id: \"#output\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/newFile\n\n  - id: \"#unMappedFile\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/unMapped\n\n\nbaseCommand: [\"liftOver\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-liftover/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nRUN  apt-get update \\\n  && apt-get install -y wget\n\nRUN apt-get install -y libpng-dev \\\n  && apt-get install -y libkrb5-dev\n\nRUN  wget -q -O /usr/local/bin/liftOver  http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/liftOver \nRUN  chmod a+x /usr/local/bin/liftOver\n\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-liftover/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-liftover:latest", 
                "meta-version": "2015-12-04 16:12:11.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-liftover/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Move annotations from one assembly to another\n\n  usage:\n     liftOver oldFile map.chain newFile unMapped\n  oldFile and newFile are in bed format by default, but can be in GFF and\n  maybe eventually others with the appropriate flags below.\n  The map.chain file has the old genome as the target and the new genome\n  as the query.\n\n  ***********************************************************************\n  WARNING: liftOver was only designed to work between different\n           assemblies of the same organism. It may not do what you want\n           if you are lifting between different organisms. If there has\n           been a rearrangement in one of the species, the size of the\n           region being mapped may change dramatically after mapping.\n  ***********************************************************************\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-liftover\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#oldFile\"\n    type: File\n    inputBinding:\n      position: 2\n\n  - id: \"#mapChain\"\n    type: File\n    description: |\n      The map.chain file has the old genome as the target and the new genome\n      as the query.\n    inputBinding:\n      position: 3\n\n  - id: \"#newFile\"\n    type: string\n    inputBinding:\n      position: 4\n\n  - id: \"#unMapped\"\n    type: string\n    inputBinding:\n      position: 5\n\n  - id: \"#gff\"\n    type: [\"null\",boolean]\n    description: |\n      File is in gff/gtf format.  Note that the gff lines are converted\n       separately.  It would be good to have a separate check after this\n       that the lines that make up a gene model still make a plausible gene\n       after liftOver\n    inputBinding:\n      position: 1\n      prefix: \"-gff\"\n\n  - id: \"#genePred\"\n    type: [\"null\",boolean]\n    description: |\n      File is in genePred format\n    inputBinding:\n      position: 1\n      prefix: \"-genePred\"\n\n  - id: \"#sample\"\n    type: [\"null\",boolean]\n    description: |\n      File is in sample format\n    inputBinding:\n      position: 1\n      prefix: \"-sample\"\n\n  - id: \"#bedPlus\"\n    type: [\"null\",int]\n    description: |\n      =N - File is bed N+ format\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-bedPlus=\"\n\n  - id: \"#positions\"\n    type: [\"null\",boolean]\n    description: |\n      File is in browser \"position\" format\n    inputBinding:\n      position: 1\n      prefix: \"-positions\"\n\n  - id: \"#hasBin\"\n    type: [\"null\",boolean]\n    description: |\n      File has bin value (used only with -bedPlus)\n    inputBinding:\n      position: 1\n      prefix: \"-hasBin\"\n\n  - id: \"#minMatch\"\n    type: [\"null\",int]\n    description: |\n      -minMatch=0.N Minimum ratio of bases that must remap. Default 0.95\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-minMatch=\"\n\n  - id: \"#tab\"\n    type: [\"null\",boolean]\n    inputBinding:\n      position: 1\n      prefix: \"-tab\"\n\n  - id: \"#pslT\"\n    type: [\"null\",boolean]\n    description: |\n      File is in psl format, map target side only\n    inputBinding:\n      position: 1\n      prefix: \"-pslT\"\n\n  - id: \"#ends\"\n    type: [\"null\",int]\n    description: |\n      =N - Lift the first and last N bases of each record and combine the\n               result. This is useful for lifting large regions like BAC end pairs.\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-ends=\"\n\n  - id: \"#minBlocks\"\n    type: [\"null\",int]\n    description: |\n      .N Minimum ratio of alignment blocks or exons that must map\n                    (default 1.00)\n    inputBinding:\n      separate: false\n      position: 1\n      prefix: \"-minBlocks=\"\n\n  - id: \"#fudgeThick\"\n    type: [\"null\",boolean]\n    description: |\n      (bed 12 or 12+ only) If thickStart/thickEnd is not mapped,\n                    use the closest mapped base.  Recommended if using\n                    -minBlocks.\n    inputBinding:\n      position: 1\n      prefix: \"-fudgeThick\"\n\n  - id: \"#multiple\"\n    type: [\"null\",boolean]\n    description: |\n      Allow multiple output regions\n    inputBinding:\n      position: 1\n      prefix: \"-multiple\"\n\n  - id: \"#minChainT\"\n    type: [\"null\",int]\n    description: |\n      Minimum chain size in target/query, when mapping\n                             to multiple output regions (default 0, 0)\n    inputBinding:\n      position: 1\n      prefix: \"-minChainT\"\n\n  - id: \"#minChainQ\"\n    type: [\"null\",int]\n    description: |\n      Minimum chain size in target/query, when mapping\n                             to multiple output regions (default 0, 0)\n    inputBinding:\n      position: 1\n      prefix: \"-minChainQ\"\n\n  - id: \"#minSizeQ\"\n    type: [\"null\",int]\n    description: |\n      Min matching region size in query with -multiple.\n    inputBinding:\n      position: 1\n      prefix: \"-minSizeQ\"\n\n  - id: \"#chainTable\"\n    type: [\"null\",string]\n    description: |\n      Min matching region size in query with -multiple.\n    inputBinding:\n      position: 1\n      prefix: \"-chainTable\"\n\n\noutputs:\n  - id: \"#output\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/newFile\n\n  - id: \"#unMappedFile\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/unMapped\n\n\nbaseCommand: [\"liftOver\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-liftover/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nRUN  apt-get update \\\n  && apt-get install -y wget\n\nRUN apt-get install -y libpng-dev \\\n  && apt-get install -y libkrb5-dev\n\nRUN  wget -q -O /usr/local/bin/liftOver  http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/liftOver \nRUN  chmod a+x /usr/local/bin/liftOver\n\n"
                }
            }
        ], 
        "name": "dockstore-tool-liftover", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-liftover", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-liftover", 
        "description": "Move annotations from one assembly to another\n\nusage:\n   liftOver oldFile map.chain newFile unMapped\noldFile and newFile are in bed format by default, but can be in GFF and\nmaybe eventually others with the appropriate flags below.\nThe map.chain file has the old genome as the target and the new genome\nas the query.\n\n***********************************************************************\nWARNING: liftOver was only designed to work between different\n         assemblies of the same organism. It may not do what you want\n         if you are lifting between different organisms. If there has\n         been a rearrangement in one of the species, the size of the\n         region being mapped may change dramatically after mapping.\n***********************************************************************"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-index/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-index:master", 
                "meta-version": "2015-11-12 22:42:53.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-index/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Prints alignments in the specified input alignment file.\n\n  Usage: samtools index [-bc] [-m INT] <in.bam> aln.bam|aln.cram\n  Options:\n    -b       Generate BAI-format index for BAM files [default]\n    -c       Generate CSI-format index for BAM files\n    -m INT   Set minimum interval size for CSI indices to 2^INT [14]\n\n  For a CRAM file aln.cram, index file aln.cram.crai will be created. For a BAM file aln.bam, either aln.bam.bai or aln.bam.csi will be created, depending on the index format selected.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-index\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 4\n\n  - id: \"#fakeoutput\"\n    type: string\n    default: \"\"\n    inputBinding:\n      position: 6\n      valueFrom:\n        engine: node-engine.cwl\n        script: |\n          {\n            var ext=$job['bai']?'.bai':$job['csi']?'.csi':'.bai';\n            return $job['input'].path.split('/').slice(-1)[0]+ext;\n          }\n\n  - id: \"#bai\"\n    type: boolean\n    default: false\n    description: |\n      Generate BAI-format index for BAM files [default]\n\n  - id: \"#csi\"\n    type: boolean\n    default: false\n    description: |\n      Generate CSI-format index for BAM files\n\n  - id: \"#interval\"\n    type: [\"null\", int]\n    description: |\n      Generate CSI-format index for BAM files\n    inputBinding:\n      position: 1\n      prefix: \"-m\"\n\noutputs:\n  - id: \"#sorted\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: node-engine.cwl\n        script: |\n          {\n            var ext=$job['bai']?'.bai':$job['csi']?'.csi':'.bai';\n            return $job['input'].path.split('/').slice(-1)[0]+ext;\n          }\n\nbaseCommand: [\"samtools\", \"index\"]\n\narguments:\n  - valueFrom:\n      engine: node-engine.cwl\n      script: |\n        $job['bai']?'-b':$job['csi']?'-c':[]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-index/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-index/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-index:latest", 
                "meta-version": "2015-11-12 22:42:54.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-index/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Prints alignments in the specified input alignment file.\n\n  Usage: samtools index [-bc] [-m INT] <in.bam> aln.bam|aln.cram\n  Options:\n    -b       Generate BAI-format index for BAM files [default]\n    -c       Generate CSI-format index for BAM files\n    -m INT   Set minimum interval size for CSI indices to 2^INT [14]\n\n  For a CRAM file aln.cram, index file aln.cram.crai will be created. For a BAM file aln.bam, either aln.bam.bai or aln.bam.csi will be created, depending on the index format selected.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-index\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 4\n\n  - id: \"#fakeoutput\"\n    type: string\n    default: \"\"\n    inputBinding:\n      position: 6\n      valueFrom:\n        engine: node-engine.cwl\n        script: |\n          {\n            var ext=$job['bai']?'.bai':$job['csi']?'.csi':'.bai';\n            return $job['input'].path.split('/').slice(-1)[0]+ext;\n          }\n\n  - id: \"#bai\"\n    type: boolean\n    default: false\n    description: |\n      Generate BAI-format index for BAM files [default]\n\n  - id: \"#csi\"\n    type: boolean\n    default: false\n    description: |\n      Generate CSI-format index for BAM files\n\n  - id: \"#interval\"\n    type: [\"null\", int]\n    description: |\n      Generate CSI-format index for BAM files\n    inputBinding:\n      position: 1\n      prefix: \"-m\"\n\noutputs:\n  - id: \"#sorted\"\n    type: File\n    description: \"The sorted file\"\n    outputBinding:\n      glob:\n        engine: node-engine.cwl\n        script: |\n          {\n            var ext=$job['bai']?'.bai':$job['csi']?'.csi':'.bai';\n            return $job['input'].path.split('/').slice(-1)[0]+ext;\n          }\n\nbaseCommand: [\"samtools\", \"index\"]\n\narguments:\n  - valueFrom:\n      engine: node-engine.cwl\n      script: |\n        $job['bai']?'-b':$job['csi']?'-c':[]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-index/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }
        ], 
        "name": "dockstore-tool-samtools-index", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-index", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-samtools-index", 
        "description": "Prints alignments in the specified input alignment file.\n\nUsage: samtools index [-bc] [-m INT] <in.bam> aln.bam|aln.cram\nOptions:\n  -b       Generate BAI-format index for BAM files [default]\n  -c       Generate CSI-format index for BAM files\n  -m INT   Set minimum interval size for CSI indices to 2^INT [14]\n\nFor a CRAM file aln.cram, index file aln.cram.crai will be created. For a BAM file aln.bam, either aln.bam.bai or aln.bam.csi will be created, depending on the index format selected."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-sort/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-sort:master", 
                "meta-version": "2015-11-12 22:42:12.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-sort/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\n# adapted from https://github.com/common-workflow-language/workflows/tree/master/tools\n\nclass: CommandLineTool\n\ndescription: |\n  Sort alignments by leftmost coordinates, or by read name when -n is used. An appropriate @HD-SO sort order header tag will be added or an existing one updated if necessary.\n\n  Usage: samtools sort [-l level] [-m maxMem] [-o out.bam] [-O format] [-n] -T out.prefix [-@ threads] [in.bam]\n\n  Options:\n  -l INT\n  Set the desired compression level for the final output file, ranging from 0 (uncompressed) or 1 (fastest but minimal compression) to 9 (best compression but slowest to write), similarly to gzip(1)'s compression level setting.\n\n  If -l is not used, the default compression level will apply.\n\n  -m INT\n  Approximately the maximum required memory per thread, specified either in bytes or with a K, M, or G suffix. [768 MiB]\n\n  -n\n  Sort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\n\n  -o FILE\n  Write the final sorted output to FILE, rather than to standard output.\n\n  -O FORMAT\n  Write the final output as sam, bam, or cram.\n\n  By default, samtools tries to select a format based on the -o filename extension; if output is to standard output or no format can be deduced, -O must be used.\n\n  -T PREFIX\n  Write temporary files to PREFIX.nnnn.bam. This option is required.\n\n  -@ INT\n  Set number of sorting and compression threads. By default, operation is single-threaded\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-sort\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#compression_level\"\n    type: [\"null\", int]\n    description: |\n      Set compression level, from 0 (uncompressed) to 9 (best)\n    inputBinding:\n      prefix: \"-l\"\n\n  - id: \"#memory\"\n    type: [\"null\", string]\n    description: |\n      Set maximum memory per thread; suffix K/M/G recognized [768M]\n    inputBinding:\n      prefix: \"-m\"\n\n  - id: \"#sort_by_name\"\n    type: [\"null\", boolean]\n    description: \"Sort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\"\n    inputBinding:\n      prefix: -n\n\n  - id: \"#threads\"\n    type: [\"null\", int]\n    description: \"Set number of sorting and compression threads [1]\"\n    inputBinding:\n      prefix: -@\n\n  - id: \"#output_name\"\n    type: string\n    description: \"Desired output filename.\"\n    inputBinding:\n      position: 2\n\n  - id: \"#input\"\n    type: File\n    description:\n      Input bam file.\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#output_file\"\n    type: File\n    outputBinding:\n      glob:\n        engine: \"cwl:JsonPointer\"\n        script: \"job/output_name\"\n\nbaseCommand: [\"samtools\", \"sort\"]\n\narguments:\n  - \"-f\"\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-sort/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-sort/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-sort:latest", 
                "meta-version": "2015-11-12 22:42:13.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-sort/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\n# adapted from https://github.com/common-workflow-language/workflows/tree/master/tools\n\nclass: CommandLineTool\n\ndescription: |\n  Sort alignments by leftmost coordinates, or by read name when -n is used. An appropriate @HD-SO sort order header tag will be added or an existing one updated if necessary.\n\n  Usage: samtools sort [-l level] [-m maxMem] [-o out.bam] [-O format] [-n] -T out.prefix [-@ threads] [in.bam]\n\n  Options:\n  -l INT\n  Set the desired compression level for the final output file, ranging from 0 (uncompressed) or 1 (fastest but minimal compression) to 9 (best compression but slowest to write), similarly to gzip(1)'s compression level setting.\n\n  If -l is not used, the default compression level will apply.\n\n  -m INT\n  Approximately the maximum required memory per thread, specified either in bytes or with a K, M, or G suffix. [768 MiB]\n\n  -n\n  Sort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\n\n  -o FILE\n  Write the final sorted output to FILE, rather than to standard output.\n\n  -O FORMAT\n  Write the final output as sam, bam, or cram.\n\n  By default, samtools tries to select a format based on the -o filename extension; if output is to standard output or no format can be deduced, -O must be used.\n\n  -T PREFIX\n  Write temporary files to PREFIX.nnnn.bam. This option is required.\n\n  -@ INT\n  Set number of sorting and compression threads. By default, operation is single-threaded\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-sort\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#compression_level\"\n    type: [\"null\", int]\n    description: |\n      Set compression level, from 0 (uncompressed) to 9 (best)\n    inputBinding:\n      prefix: \"-l\"\n\n  - id: \"#memory\"\n    type: [\"null\", string]\n    description: |\n      Set maximum memory per thread; suffix K/M/G recognized [768M]\n    inputBinding:\n      prefix: \"-m\"\n\n  - id: \"#sort_by_name\"\n    type: [\"null\", boolean]\n    description: \"Sort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\"\n    inputBinding:\n      prefix: -n\n\n  - id: \"#threads\"\n    type: [\"null\", int]\n    description: \"Set number of sorting and compression threads [1]\"\n    inputBinding:\n      prefix: -@\n\n  - id: \"#output_name\"\n    type: string\n    description: \"Desired output filename.\"\n    inputBinding:\n      position: 2\n\n  - id: \"#input\"\n    type: File\n    description:\n      Input bam file.\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#output_file\"\n    type: File\n    outputBinding:\n      glob:\n        engine: \"cwl:JsonPointer\"\n        script: \"job/output_name\"\n\nbaseCommand: [\"samtools\", \"sort\"]\n\narguments:\n  - \"-f\"\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-sort/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }
        ], 
        "name": "dockstore-tool-samtools-sort", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-sort", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-samtools-sort", 
        "description": "Sort alignments by leftmost coordinates, or by read name when -n is used. An appropriate @HD-SO sort order header tag will be added or an existing one updated if necessary.\n\nUsage: samtools sort [-l level] [-m maxMem] [-o out.bam] [-O format] [-n] -T out.prefix [-@ threads] [in.bam]\n\nOptions:\n-l INT\nSet the desired compression level for the final output file, ranging from 0 (uncompressed) or 1 (fastest but minimal compression) to 9 (best compression but slowest to write), similarly to gzip(1)'s compression level setting.\n\nIf -l is not used, the default compression level will apply.\n\n-m INT\nApproximately the maximum required memory per thread, specified either in bytes or with a K, M, or G suffix. [768 MiB]\n\n-n\nSort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\n\n-o FILE\nWrite the final sorted output to FILE, rather than to standard output.\n\n-O FORMAT\nWrite the final output as sam, bam, or cram.\n\nBy default, samtools tries to select a format based on the -o filename extension; if output is to standard output or no format can be deduced, -O must be used.\n\n-T PREFIX\nWrite temporary files to PREFIX.nnnn.bam. This option is required.\n\n-@ INT\nSet number of sorting and compression threads. By default, operation is single-threaded"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-diff/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-diff:master", 
                "meta-version": "2015-11-10 17:24:10.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-diff/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Diff two SAM/BAM files outputting discrepant reads in corresponding SAM/BAM files\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-diff\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in1\"\n    type: File\n    description: \"Input SAM/BAM file 1 sorted by read\"\n    inputBinding:\n      position: 1\n\n  - id: \"#in2\"\n    type: File\n    description: \"Input SAM/BAM file 2 sorted by read\"\n    inputBinding:\n      position: 2\n\n  - id: \"#ids-only\"\n    type: string\n    description: \"If specified, compare read id only. Otherwise, entire read is compared\"\n    inputBinding:\n      position: 3\n\noutputs:\n  - id: \"#out1\"\n    type: File\n    description: \"Output SAM/BAM file containing reads unique to input file 1\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\n  - id: \"#out2\"\n    type: File\n    description: \"Output SAM/BAM file containing reads unique to input file 2\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output2\n\n\nbaseCommand: [\"sam-diff\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-diff/master/Dockerfile", 
                    "dockerfile": "# adapted from https://github.com/BD2KGenomics/cgl-docker-lib/tree/master/ubu \n\nFROM java:8-jdk\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\nENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-diff/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-diff:latest", 
                "meta-version": "2015-11-10 17:24:11.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-diff/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Diff two SAM/BAM files outputting discrepant reads in corresponding SAM/BAM files\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-diff\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in1\"\n    type: File\n    description: \"Input SAM/BAM file 1 sorted by read\"\n    inputBinding:\n      position: 1\n\n  - id: \"#in2\"\n    type: File\n    description: \"Input SAM/BAM file 2 sorted by read\"\n    inputBinding:\n      position: 2\n\n  - id: \"#ids-only\"\n    type: string\n    description: \"If specified, compare read id only. Otherwise, entire read is compared\"\n    inputBinding:\n      position: 3\n\noutputs:\n  - id: \"#out1\"\n    type: File\n    description: \"Output SAM/BAM file containing reads unique to input file 1\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\n  - id: \"#out2\"\n    type: File\n    description: \"Output SAM/BAM file containing reads unique to input file 2\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output2\n\n\nbaseCommand: [\"sam-diff\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-diff/master/Dockerfile", 
                    "dockerfile": "# adapted from https://github.com/BD2KGenomics/cgl-docker-lib/tree/master/ubu \n\nFROM java:8-jdk\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\nENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-ubu-sam-diff", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andy Yang", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-diff", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-diff", 
        "description": "Diff two SAM/BAM files outputting discrepant reads in corresponding SAM/BAM files"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-filter/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-filter:master", 
                "meta-version": "2015-11-10 17:13:01.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-filter/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Filter reads from a paired end SAM or BAM file (only outputs paired reads)\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-filter\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Required input sam or bam file\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Required output sam or bam file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"sam-filter\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-filter/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\n#MAINTAINER Aashish Jain, 17AashishJ@students.harker.org\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\n#ENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-filter/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-filter:latest", 
                "meta-version": "2015-11-10 17:13:02.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-filter/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Filter reads from a paired end SAM or BAM file (only outputs paired reads)\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-filter\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Required input sam or bam file\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Required output sam or bam file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"sam-filter\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-filter/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\n#MAINTAINER Aashish Jain, 17AashishJ@students.harker.org\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\n#ENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-ubu-sam-filter", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andy Yang", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-filter", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-filter", 
        "description": "Filter reads from a paired end SAM or BAM file (only outputs paired reads)"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-summary/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-summary:master", 
                "meta-version": "2015-11-10 17:13:29.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-summary/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: | \n  Output summary statistics per reference for a SAM/BAM file (Aligned reads only).\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-summary\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Input sam or bam file\"\n    inputBinding:\n      position: 1\n\n  - id: \"#header\"\n    type: File\n    description: \"Output header\"\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Output summary file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"sam-filter\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-summary/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\n#MAINTAINER Aashish Jain, 17AashishJ@students.harker.org\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\n#ENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-summary/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-summary:latest", 
                "meta-version": "2015-11-10 17:13:30.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-summary/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: | \n  Output summary statistics per reference for a SAM/BAM file (Aligned reads only).\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-ubu-sam-summary\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Input sam or bam file\"\n    inputBinding:\n      position: 1\n\n  - id: \"#header\"\n    type: File\n    description: \"Output header\"\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Output summary file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"sam-filter\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-ubu-sam-summary/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\n#MAINTAINER Aashish Jain, 17AashishJ@students.harker.org\n\nRUN apt-get -y update \\\n  && apt-get -y install wget\n\nRUN mkdir /opt/ubu\n\nCOPY wrapper.sh /opt/ubu/\n\nRUN wget https://github.com/downloads/mozack/ubu/ubu-1.2-jar-with-dependencies.jar -O ubu.jar\nRUN mv ubu.jar /opt/ubu/\n\nRUN mkdir /data\nWORKDIR /data\n\n#ENTRYPOINT [\"sh\", \"/opt/ubu/wrapper.sh\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-ubu-sam-summary", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andy Yang", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-ubu-sam-summary", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-ubu-sam-summary", 
        "description": "Output summary statistics per reference for a SAM/BAM file (Aligned reads only)."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-rnaseqc/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-rnaseqc:master", 
                "meta-version": "2015-11-11 16:39:20.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-rnaseqc/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Computes a series of quality control metrics for RNA-seq data.\n\n  Usage:\n\n  -bwa <arg>\n  Path to BWA, which should be set if it's not in your path and BWArRNA is used.\n\n  -BWArRNA <arg>\n  Use an on the fly BWA alignment for estimating rRNA content. The value should be the rRNA reference fasta. If this flag is absent, rRNA estimation will be based upon the rRNA transcript intervals provided in the GTF (a faster but less robust method).\n\n  -corr <arg>\n  GCT file for expression correlation comparison. Note, that the values must be log normalized, and the identifiers must match those of the GTF file.\n\n  -d <arg>\n  Perform downsampling to the given number of reads.\n\n  -e <arg>\n  Change the definition of a transcripts end (5' or 3') to the given length. (50, 100, 200 are acceptable values; 200 is default)\n\n  -expr <arg>\n  Uses provided GCT file for expression values instead of on-the-fly RPKM calculation\n\n  -gc <arg>\n  File of transcript id <tab> gc content. Used for stratification.\n\n  -n <arg>\n  Number of top transcripts to use. Default is 1000.\n\n  -noDoC\n  Suppresses GATK Depth of Coverage calculations.\n\n  -noReadCounting\n  Suppresses read count-based metrics.\n\n  -o <arg>\n  Output directory (will be created if doesn't exist).\n\n  -r <arg>\n  Reference Genome in fasta format.\n\n  -rRNA <arg>\n  intervalFIle for rRNA loci (must end in .list). This is an alternative flag to the -BWArRNA flag.\n\n  -s <arg>\n  Sample File: tab-delimited description of samples and their bams. This file header is:\n  Sample ID    Bam File    Notes\n  When running on just one sample, this argument can be a string of the form\n  \"Sample ID|Bam File|Notes\", where Bam File is the path to the input file.\n\n  -singleEnd\n  This BAM contains single end reads.\n\n  -strat <arg>\n  Stratification options: current supported option is 'gc'\n\n  -strictMode <arg>\n  When counting reads per exon or generating RPKMs, reads will be filtered out that have a mapping quality of zero, more than 6 non-reference bases or improper pairs.\n\n  -t <arg>\n  GTF File defining transcripts (must end in '.gtf').\n\n  -transcriptDetails\n  Provide an HTML report for each transcript.\n\n  -ttype <arg>\n  The column in GTF to use to look for rRNA transcript type. Mainly used for running on Ensembl GTF (specify \"-ttype 2\"). Otherwise, for spec-conforming GTF files, disregard.\n\n  -rRNAdSampleTarget\n  Downsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.\n\n  -gcMargin\n  Used in conjunction with '-strat gc' to specify the percent gc content to use as boundaries. E.g. .25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).\n\n  -gld\n  Gap Length Distribution: if flag is present, the distribution of gap lengths will be plotted.\n\n  -gatkFlags\n  Pass a string of quotes directly to the GATK (e.g. -gatkFlags \"-DBQ 0\" to set missing base qualities to zero). \n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-rnaseqc\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#bwa\"\n    type: [ \"null\", File ]\n    description: \"Path to BWA, which should be set if it's not in your path and BWArRNA is used.\"\n    inputBinding:\n      position: 1\n      prefix: \"-bwa\"\n\n  - id: \"#BWArRNA\"\n    type: [ \"null\", string ]\n    description: \"Use an on the fly BWA alignment for estimating rRNA content. The value should be the rRNA reference fasta. If this flag is absent, rRNA estimation will be based upon the rRNA transcript intervals provided in the GTF (a faster but less robust method).\"\n    inputBinding:\n      position: 2\n      prefix: \"-BWArRNA\"\n\n  - id: \"#corr\"\n    type: [ \"null\", string ]\n    description: \"GCT file for expression correlation comparison. Note, that the values must be log normalized, and the identifiers must match those of the GTF file.\"\n    inputBinding:\n      position: 3\n      prefix: \"-corr\"\n\n  - id: \"#d\"\n    type: [ \"null\", string ]\n    description: \"Perform downsampling to the given number of reads.\"\n    inputBinding:\n      position: 4\n      prefix: \"-d\"\n\n  - id: \"#e\"\n    type: [ \"null\", string ]\n    description: \"Change the definition of a transcripts end (5' or 3') to the given length. (50, 100, 200 are acceptable values; 200 is default)\"\n    inputBinding:\n      position: 5\n      prefix: \"-e\"\n\n  - id: \"#expr\"\n    type: [ \"null\", File ]\n    description: \"Uses provided GCT file for expression values instead of on-the-fly RPKM calculation\"\n    inputBinding:\n      position: 6\n      prefix: \"-expr\"\n\n  - id: \"#gc\"\n    type: [ \"null\", File ]\n    description: \"File of transcript id <tab> gc content. Used for stratification.\"\n    inputBinding:\n      position: 7\n      prefix: \"-gc\"\n\n  - id: \"#n\"\n    type: [ \"null\", integer ]\n    description: \"Number of top transcripts to use. Default is 1000.\"\n    inputBinding:\n      position: 8\n      prefix: \"-n\"\n\n  - id: \"#noDoCa\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses GATK Depth of Coverage calculations.\"\n    inputBinding:\n      position: 8\n      prefix: \"-noDoCa\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#o\"\n    type: string\n    description: \"Output directory (will be created if doesn't exist).\"\n    inputBinding:\n      position: 8\n      prefix: \"-o\"\n\n  - id: \"#r\"\n    type: string \n    description: \"Reference Genome in fasta format.\"\n    inputBinding:\n      position: 8\n      prefix: \"-r\"\n\n  - id: \"#rRNA\"\n    type: [ \"null\", File ]\n    description: \"intervalFile for rRNA loci (must end in .list). This is an alternative flag to the -BWArRNA flag.\"\n    inputBinding:\n      position: 8\n      prefix: \"-rRNA\"\n\n  - id: \"#s\"\n    type: File\n    description: \"Sample File: tab-delimited description of samples and their bams\"\n    inputBinding:\n      position: 8\n      prefix: \"-s\"\n\n  - id: \"#singleEnd\"\n    type: File\n    description: \"This BAM contains single end reads.\"\n    inputBinding:\n      position: 8\n      prefix: \"-singleEnd\"\n\n  - id: \"#strat\"\n    type: [ \"gc\", string ] \n    description: \"Stratification options: current supported option is 'gc'\"\n    inputBinding:\n      position: 8\n      prefix: \"-strat\"\n\n  - id: \"#strictMode\"\n    type: [ \"null\", boolean ] \n    description: \"When counting reads per exon or generating RPKMs, reads will be filtered out that have a mapping quality of zero, more than 6 non-reference bases or improper pairs.\"\n    inputBinding:\n      position: 8\n      prefix: \"-strictMode\"\n\n  - id: \"#t\"\n    type: File \n    description: \"iGTF File defining transcripts (must end in '.gtf').\"\n    inputBinding:\n      position: 8\n      prefix: \"-t\"\n\n  - id: \"#transcriptDetails\"\n    type: [ \"null\", File ] \n    description: \"Provide an HTML report for each transcript.\"\n    inputBinding:\n      position: 8\n      prefix: \"-transcriptDetails\"\n\n  - id: \"#ttype\"\n    type: [ \"null\", integer ] \n    description: \"The column in GTF to use to look for rRNA transcript type. Mainly used for running on Ensembl GTF (specify \\\"-ttype 2\\\"). Otherwise, for spec-conforming GTF files, disregard.\"\n    inputBinding:\n      position: 8\n      prefix: \"-ttype\"\n\n  - id: \"#rRNAdSampleTarget\"\n    type: [ \"null\", integer ] \n    description: \"Downsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.\"\n    inputBinding:\n      position: 8\n      prefix: \"-rRNAdSampleTarget\"\n\n  - id: \"#gcMargin\"\n    type: [ \"null\", double ] \n    description: \"Used in conjunction with '-strat gc' to specify the percent gc content to use as boundaries. E.g. .25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).\"\n    inputBinding:\n      position: 8\n      prefix: \"-gcMargin\"\n\n  - id: \"#gld\"\n    type: \"null\" \n    description: \"Gap Length Distribution: if flag is present, the distribution of gap lengths will be plotted.\"\n    inputBinding:\n      position: 8\n      prefix: \"-gld\"\n\n  - id: \"#gatkFlags\"\n    type: [ \"null\", string ] \n    description: \"Pass a string of quotes directly to the GATK (e.g. -gatkFlags \\\"-DBQ 0\\\" to set missing base qualities to zero).\"\n    inputBinding:\n      position: 8\n      prefix: \"-gatkFlags\"\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Required output sam or bam file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"wrapper.sh\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-rnaseqc/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\nMAINTAINER John Vivian, jtvivian@gmail.com\n\nRUN mkdir /opt/rnaseqc\nRUN mkdir /data\n\nADD wrapper.sh /opt/rnaseqc/\nRUN chmod +x /opt/rnaseqc/wrapper.sh\n\nWORKDIR /opt/rnaseqc\nRUN wget http://www.broadinstitute.org/cancer/cga/tools/rnaseqc/RNA-SeQC_v1.1.8.jar\n\nWORKDIR /data\nENTRYPOINT [\"/opt/rnaseqc/wrapper.sh\"]\n\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-rnaseqc/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-rnaseqc:latest", 
                "meta-version": "2015-11-11 16:39:21.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-rnaseqc/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Computes a series of quality control metrics for RNA-seq data.\n\n  Usage:\n\n  -bwa <arg>\n  Path to BWA, which should be set if it's not in your path and BWArRNA is used.\n\n  -BWArRNA <arg>\n  Use an on the fly BWA alignment for estimating rRNA content. The value should be the rRNA reference fasta. If this flag is absent, rRNA estimation will be based upon the rRNA transcript intervals provided in the GTF (a faster but less robust method).\n\n  -corr <arg>\n  GCT file for expression correlation comparison. Note, that the values must be log normalized, and the identifiers must match those of the GTF file.\n\n  -d <arg>\n  Perform downsampling to the given number of reads.\n\n  -e <arg>\n  Change the definition of a transcripts end (5' or 3') to the given length. (50, 100, 200 are acceptable values; 200 is default)\n\n  -expr <arg>\n  Uses provided GCT file for expression values instead of on-the-fly RPKM calculation\n\n  -gc <arg>\n  File of transcript id <tab> gc content. Used for stratification.\n\n  -n <arg>\n  Number of top transcripts to use. Default is 1000.\n\n  -noDoC\n  Suppresses GATK Depth of Coverage calculations.\n\n  -noReadCounting\n  Suppresses read count-based metrics.\n\n  -o <arg>\n  Output directory (will be created if doesn't exist).\n\n  -r <arg>\n  Reference Genome in fasta format.\n\n  -rRNA <arg>\n  intervalFIle for rRNA loci (must end in .list). This is an alternative flag to the -BWArRNA flag.\n\n  -s <arg>\n  Sample File: tab-delimited description of samples and their bams. This file header is:\n  Sample ID    Bam File    Notes\n  When running on just one sample, this argument can be a string of the form\n  \"Sample ID|Bam File|Notes\", where Bam File is the path to the input file.\n\n  -singleEnd\n  This BAM contains single end reads.\n\n  -strat <arg>\n  Stratification options: current supported option is 'gc'\n\n  -strictMode <arg>\n  When counting reads per exon or generating RPKMs, reads will be filtered out that have a mapping quality of zero, more than 6 non-reference bases or improper pairs.\n\n  -t <arg>\n  GTF File defining transcripts (must end in '.gtf').\n\n  -transcriptDetails\n  Provide an HTML report for each transcript.\n\n  -ttype <arg>\n  The column in GTF to use to look for rRNA transcript type. Mainly used for running on Ensembl GTF (specify \"-ttype 2\"). Otherwise, for spec-conforming GTF files, disregard.\n\n  -rRNAdSampleTarget\n  Downsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.\n\n  -gcMargin\n  Used in conjunction with '-strat gc' to specify the percent gc content to use as boundaries. E.g. .25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).\n\n  -gld\n  Gap Length Distribution: if flag is present, the distribution of gap lengths will be plotted.\n\n  -gatkFlags\n  Pass a string of quotes directly to the GATK (e.g. -gatkFlags \"-DBQ 0\" to set missing base qualities to zero). \n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-rnaseqc\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#bwa\"\n    type: [ \"null\", File ]\n    description: \"Path to BWA, which should be set if it's not in your path and BWArRNA is used.\"\n    inputBinding:\n      position: 1\n      prefix: \"-bwa\"\n\n  - id: \"#BWArRNA\"\n    type: [ \"null\", string ]\n    description: \"Use an on the fly BWA alignment for estimating rRNA content. The value should be the rRNA reference fasta. If this flag is absent, rRNA estimation will be based upon the rRNA transcript intervals provided in the GTF (a faster but less robust method).\"\n    inputBinding:\n      position: 2\n      prefix: \"-BWArRNA\"\n\n  - id: \"#corr\"\n    type: [ \"null\", string ]\n    description: \"GCT file for expression correlation comparison. Note, that the values must be log normalized, and the identifiers must match those of the GTF file.\"\n    inputBinding:\n      position: 3\n      prefix: \"-corr\"\n\n  - id: \"#d\"\n    type: [ \"null\", string ]\n    description: \"Perform downsampling to the given number of reads.\"\n    inputBinding:\n      position: 4\n      prefix: \"-d\"\n\n  - id: \"#e\"\n    type: [ \"null\", string ]\n    description: \"Change the definition of a transcripts end (5' or 3') to the given length. (50, 100, 200 are acceptable values; 200 is default)\"\n    inputBinding:\n      position: 5\n      prefix: \"-e\"\n\n  - id: \"#expr\"\n    type: [ \"null\", File ]\n    description: \"Uses provided GCT file for expression values instead of on-the-fly RPKM calculation\"\n    inputBinding:\n      position: 6\n      prefix: \"-expr\"\n\n  - id: \"#gc\"\n    type: [ \"null\", File ]\n    description: \"File of transcript id <tab> gc content. Used for stratification.\"\n    inputBinding:\n      position: 7\n      prefix: \"-gc\"\n\n  - id: \"#n\"\n    type: [ \"null\", integer ]\n    description: \"Number of top transcripts to use. Default is 1000.\"\n    inputBinding:\n      position: 8\n      prefix: \"-n\"\n\n  - id: \"#noDoCa\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses GATK Depth of Coverage calculations.\"\n    inputBinding:\n      position: 8\n      prefix: \"-noDoCa\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#noReadCounting\"\n    type: [ \"null\", integer ]\n    description: \"Suppresses read count-based metrics.\"\n    inputBinding:\n      position: 8\n      prefix: \"--noReadCounting\"\n\n  - id: \"#o\"\n    type: string\n    description: \"Output directory (will be created if doesn't exist).\"\n    inputBinding:\n      position: 8\n      prefix: \"-o\"\n\n  - id: \"#r\"\n    type: string \n    description: \"Reference Genome in fasta format.\"\n    inputBinding:\n      position: 8\n      prefix: \"-r\"\n\n  - id: \"#rRNA\"\n    type: [ \"null\", File ]\n    description: \"intervalFile for rRNA loci (must end in .list). This is an alternative flag to the -BWArRNA flag.\"\n    inputBinding:\n      position: 8\n      prefix: \"-rRNA\"\n\n  - id: \"#s\"\n    type: File\n    description: \"Sample File: tab-delimited description of samples and their bams\"\n    inputBinding:\n      position: 8\n      prefix: \"-s\"\n\n  - id: \"#singleEnd\"\n    type: File\n    description: \"This BAM contains single end reads.\"\n    inputBinding:\n      position: 8\n      prefix: \"-singleEnd\"\n\n  - id: \"#strat\"\n    type: [ \"gc\", string ] \n    description: \"Stratification options: current supported option is 'gc'\"\n    inputBinding:\n      position: 8\n      prefix: \"-strat\"\n\n  - id: \"#strictMode\"\n    type: [ \"null\", boolean ] \n    description: \"When counting reads per exon or generating RPKMs, reads will be filtered out that have a mapping quality of zero, more than 6 non-reference bases or improper pairs.\"\n    inputBinding:\n      position: 8\n      prefix: \"-strictMode\"\n\n  - id: \"#t\"\n    type: File \n    description: \"iGTF File defining transcripts (must end in '.gtf').\"\n    inputBinding:\n      position: 8\n      prefix: \"-t\"\n\n  - id: \"#transcriptDetails\"\n    type: [ \"null\", File ] \n    description: \"Provide an HTML report for each transcript.\"\n    inputBinding:\n      position: 8\n      prefix: \"-transcriptDetails\"\n\n  - id: \"#ttype\"\n    type: [ \"null\", integer ] \n    description: \"The column in GTF to use to look for rRNA transcript type. Mainly used for running on Ensembl GTF (specify \\\"-ttype 2\\\"). Otherwise, for spec-conforming GTF files, disregard.\"\n    inputBinding:\n      position: 8\n      prefix: \"-ttype\"\n\n  - id: \"#rRNAdSampleTarget\"\n    type: [ \"null\", integer ] \n    description: \"Downsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.\"\n    inputBinding:\n      position: 8\n      prefix: \"-rRNAdSampleTarget\"\n\n  - id: \"#gcMargin\"\n    type: [ \"null\", double ] \n    description: \"Used in conjunction with '-strat gc' to specify the percent gc content to use as boundaries. E.g. .25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).\"\n    inputBinding:\n      position: 8\n      prefix: \"-gcMargin\"\n\n  - id: \"#gld\"\n    type: \"null\" \n    description: \"Gap Length Distribution: if flag is present, the distribution of gap lengths will be plotted.\"\n    inputBinding:\n      position: 8\n      prefix: \"-gld\"\n\n  - id: \"#gatkFlags\"\n    type: [ \"null\", string ] \n    description: \"Pass a string of quotes directly to the GATK (e.g. -gatkFlags \\\"-DBQ 0\\\" to set missing base qualities to zero).\"\n    inputBinding:\n      position: 8\n      prefix: \"-gatkFlags\"\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Required output sam or bam file\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"wrapper.sh\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-rnaseqc/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\nMAINTAINER John Vivian, jtvivian@gmail.com\n\nRUN mkdir /opt/rnaseqc\nRUN mkdir /data\n\nADD wrapper.sh /opt/rnaseqc/\nRUN chmod +x /opt/rnaseqc/wrapper.sh\n\nWORKDIR /opt/rnaseqc\nRUN wget http://www.broadinstitute.org/cancer/cga/tools/rnaseqc/RNA-SeQC_v1.1.8.jar\n\nWORKDIR /data\nENTRYPOINT [\"/opt/rnaseqc/wrapper.sh\"]\n\n"
                }
            }
        ], 
        "name": "dockstore-tool-rnaseqc", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andy Yang", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-rnaseqc", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-rnaseqc", 
        "description": "Computes a series of quality control metrics for RNA-seq data.\n\nUsage:\n\n-bwa <arg>\nPath to BWA, which should be set if it's not in your path and BWArRNA is used.\n\n-BWArRNA <arg>\nUse an on the fly BWA alignment for estimating rRNA content. The value should be the rRNA reference fasta. If this flag is absent, rRNA estimation will be based upon the rRNA transcript intervals provided in the GTF (a faster but less robust method).\n\n-corr <arg>\nGCT file for expression correlation comparison. Note, that the values must be log normalized, and the identifiers must match those of the GTF file.\n\n-d <arg>\nPerform downsampling to the given number of reads.\n\n-e <arg>\nChange the definition of a transcripts end (5' or 3') to the given length. (50, 100, 200 are acceptable values; 200 is default)\n\n-expr <arg>\nUses provided GCT file for expression values instead of on-the-fly RPKM calculation\n\n-gc <arg>\nFile of transcript id <tab> gc content. Used for stratification.\n\n-n <arg>\nNumber of top transcripts to use. Default is 1000.\n\n-noDoC\nSuppresses GATK Depth of Coverage calculations.\n\n-noReadCounting\nSuppresses read count-based metrics.\n\n-o <arg>\nOutput directory (will be created if doesn't exist).\n\n-r <arg>\nReference Genome in fasta format.\n\n-rRNA <arg>\nintervalFIle for rRNA loci (must end in .list). This is an alternative flag to the -BWArRNA flag.\n\n-s <arg>\nSample File: tab-delimited description of samples and their bams. This file header is:\nSample ID    Bam File    Notes\nWhen running on just one sample, this argument can be a string of the form\n\"Sample ID|Bam File|Notes\", where Bam File is the path to the input file.\n\n-singleEnd\nThis BAM contains single end reads.\n\n-strat <arg>\nStratification options: current supported option is 'gc'\n\n-strictMode <arg>\nWhen counting reads per exon or generating RPKMs, reads will be filtered out that have a mapping quality of zero, more than 6 non-reference bases or improper pairs.\n\n-t <arg>\nGTF File defining transcripts (must end in '.gtf').\n\n-transcriptDetails\nProvide an HTML report for each transcript.\n\n-ttype <arg>\nThe column in GTF to use to look for rRNA transcript type. Mainly used for running on Ensembl GTF (specify \"-ttype 2\"). Otherwise, for spec-conforming GTF files, disregard.\n\n-rRNAdSampleTarget\nDownsamples to calculate rRNA rate more efficiently. Default is 1 million. Set to 0 to disable.\n\n-gcMargin\nUsed in conjunction with '-strat gc' to specify the percent gc content to use as boundaries. E.g. .25 would set a lower cutoff of 25% and an upper cutoff of 75% (default is 0.375).\n\n-gld\nGap Length Distribution: if flag is present, the distribution of gap lengths will be plotted.\n\n-gatkFlags\nPass a string of quotes directly to the GATK (e.g. -gatkFlags \"-DBQ 0\" to set missing base qualities to zero). "
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-snpeff/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-snpeff:master", 
                "meta-version": "2015-11-10 17:38:12.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-snpeff/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Annotates and predicts the effects of variants on genes (such as amino acid changes).\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-snpeff\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Predicted variants (SNPs, insertions, deletions and MNPs). The input file is usually obtained as a result of a sequencing experiment, and it is usually in variant call format (VCF).\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Output path(?) for 3 output files: the HTML file containing summary statistics about the variants and their annotations; an annotated VCF file; and a text file summarizing the number of variant types per gene.\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-snpeff/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\nRUN apt-get update \\\n  && apt-get install -y unzip wget\n\nWORKDIR /opt\nRUN wget http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip\nRUN unzip snpEff_latest_core.zip\nRUN rm snpEff_latest_core.zip\n\nRUN mv snpEff snpeff\nCOPY wrapper.sh /opt/snpeff/\n\nRUN mkdir /data\nWORKDIR /data\n\nENTRYPOINT [\"sh\", \"/opt/snpeff/wrapper.sh\"]\n\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-snpeff/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-snpeff:latest", 
                "meta-version": "2015-11-10 17:38:13.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-snpeff/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Annotates and predicts the effects of variants on genes (such as amino acid changes).\n\ndct:creator:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-snpeff\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#in\"\n    type: File\n    description: \"Predicted variants (SNPs, insertions, deletions and MNPs). The input file is usually obtained as a result of a sequencing experiment, and it is usually in variant call format (VCF).\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#out\"\n    type: File\n    description: \"Output path(?) for 3 output files: the HTML file containing summary statistics about the variants and their annotations; an annotated VCF file; and a text file summarizing the number of variant types per gene.\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output1\n\nbaseCommand: [\"\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-snpeff/master/Dockerfile", 
                    "dockerfile": "FROM java:8-jdk\n\nRUN apt-get update \\\n  && apt-get install -y unzip wget\n\nWORKDIR /opt\nRUN wget http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip\nRUN unzip snpEff_latest_core.zip\nRUN rm snpEff_latest_core.zip\n\nRUN mv snpEff snpeff\nCOPY wrapper.sh /opt/snpeff/\n\nRUN mkdir /data\nWORKDIR /data\n\nENTRYPOINT [\"sh\", \"/opt/snpeff/wrapper.sh\"]\n\n"
                }
            }
        ], 
        "name": "dockstore-tool-snpeff", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andy Yang", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-snpeff", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-snpeff", 
        "description": "Annotates and predicts the effects of variants on genes (such as amino acid changes)."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-rmdup/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-rmdup:master", 
                "meta-version": "2015-11-12 22:41:42.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-rmdup/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Remove potential PCR duplicates: if multiple read pairs have identical external coordinates, only retain the pair with highest mapping quality. In the paired-end mode, this command ONLY works with FR orientation and requires ISIZE is correctly set. It does not work for unpaired reads (e.g. two ends mapped to different chromosomes or orphan reads).\n\n  Usage: samtools rmdup [-sS] <input.srt.bam> <out.bam>\n  Options:\n    -s       Remove duplicates for single-end reads. By default, the command works for paired-end reads only.\n    -S       Treat paired-end reads and single-end reads.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-rmdup\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 2\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 3\n\n  - id: \"#single_end\"\n    type: boolean\n    default: false\n    description: |\n      rmdup for SE reads\n\n  - id: \"#pairend_as_se\"\n    type: boolean\n    default: false\n    description: |\n      treat PE reads as SE in rmdup (force -s)\n\noutputs:\n  - id: \"#rmdup\"\n    type: File\n    description: \"File with removed duplicates\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"samtools\", \"rmdup\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-rmdup/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-rmdup/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-rmdup:latest", 
                "meta-version": "2015-11-12 22:41:42.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-rmdup/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Remove potential PCR duplicates: if multiple read pairs have identical external coordinates, only retain the pair with highest mapping quality. In the paired-end mode, this command ONLY works with FR orientation and requires ISIZE is correctly set. It does not work for unpaired reads (e.g. two ends mapped to different chromosomes or orphan reads).\n\n  Usage: samtools rmdup [-sS] <input.srt.bam> <out.bam>\n  Options:\n    -s       Remove duplicates for single-end reads. By default, the command works for paired-end reads only.\n    -S       Treat paired-end reads and single-end reads.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-rmdup\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 2\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 3\n\n  - id: \"#single_end\"\n    type: boolean\n    default: false\n    description: |\n      rmdup for SE reads\n\n  - id: \"#pairend_as_se\"\n    type: boolean\n    default: false\n    description: |\n      treat PE reads as SE in rmdup (force -s)\n\noutputs:\n  - id: \"#rmdup\"\n    type: File\n    description: \"File with removed duplicates\"\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"samtools\", \"rmdup\"]\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-rmdup/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }
        ], 
        "name": "dockstore-tool-samtools-rmdup", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-rmdup", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-samtools-rmdup", 
        "description": "Remove potential PCR duplicates: if multiple read pairs have identical external coordinates, only retain the pair with highest mapping quality. In the paired-end mode, this command ONLY works with FR orientation and requires ISIZE is correctly set. It does not work for unpaired reads (e.g. two ends mapped to different chromosomes or orphan reads).\n\nUsage: samtools rmdup [-sS] <input.srt.bam> <out.bam>\nOptions:\n  -s       Remove duplicates for single-end reads. By default, the command works for paired-end reads only.\n  -S       Treat paired-end reads and single-end reads."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-view/version/master", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-view:master", 
                "meta-version": "2015-11-12 22:42:36.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-view/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Prints alignments in the specified input alignment file.\n\n  With no options or regions specified, prints all alignments in the specified input alignment file (in SAM, BAM, or CRAM format) to standard output in SAM format (with no header).\n\n  You may specify one or more space-separated region specifications after the input filename to restrict output to only those alignments which overlap the specified region(s). Use of region specifications requires a coordinate-sorted and indexed input file (in BAM or CRAM format).\n\n  The -b, -C, -1, -u, -h, -H, and -c options change the output format from the default of headerless SAM, and the -o and -U options set the output file name(s).\n\n  The -t and -T options provide additional reference data. One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.\n\n  The -L, -r, -R, -q, -l, -m, -f, and -F options filter the alignments that will be included in the output to only those alignments that match certain criteria.\n\n  The -x, -B, and -s options modify the data which is contained in each alignment.\n\n  Finally, the -@ option can be used to allocate additional threads to be used for compression, and the -? option requests a long help message.\n\n  Usage: samtools view [options] in.bam|in.sam|in.cram [region...]\n\n  Regions can be specified as: RNAME[:STARTPOS[-ENDPOS]] and all position coordinates are 1-based.\n\n  Important note: when multiple regions are given, some alignments may be output multiple times if they overlap more than one of the specified regions.\n\n  Examples of region specifications:\n\n  `chr1'\n  Output all alignments mapped to the reference sequence named `chr1' (i.e. @SQ SN:chr1) .\n\n  `chr2:1000000'\n  The region on chr2 beginning at base position 1,000,000 and ending at the end of the chromosome.\n\n  `chr3:1000-2000'\n  The 1001bp region on chr3 beginning at base position 1,000 and ending at base position 2,000 (including both end positions).\n\n  OPTIONS:\n\n  -b\n  Output in the BAM format.\n\n  -C\n  Output in the CRAM format (requires -T).\n\n  -1\n  Enable fast BAM compression (implies -b).\n\n  -u\n  Output uncompressed BAM. This option saves time spent on compression/decompression and is thus preferred when the output is piped to another samtools command.\n\n  -h\n  Include the header in the output.\n\n  -H\n  Output the header only.\n\n  -c\n  Instead of printing the alignments, only count them and print the total number. All filter options, such as -f, -F, and -q, are taken into account.\n\n  -?\n  Output long help and exit immediately.\n\n  -o FILE\n  Output to FILE [stdout].\n\n  -U FILE\n  Write alignments that are not selected by the various filter options to FILE. When this option is used, all alignments (or all alignments intersecting the regions specified) are written to either the output file or this file, but never both.\n\n  -t FILE\n  A tab-delimited FILE. Each line must contain the reference name in the first column and the length of the reference in the second column, with one line for each distinct reference. Any additional fields beyond the second column are ignored. This file also defines the order of the reference sequences in sorting. If you run: `samtools faidx <ref.fa>', the resulting index file <ref.fa>.fai can be used as this FILE.\n\n  -T FILE\n  A FASTA format reference FILE, optionally compressed by bgzip and ideally indexed by samtools faidx. If an index is not present, one will be generated for you.\n\n  -L FILE\n  Only output alignments overlapping the input BED FILE [null].\n\n  -r STR\n  Only output alignments in read group STR [null].\n\n  -R FILE\n  Output alignments in read groups listed in FILE [null].\n\n  -q INT\n  Skip alignments with MAPQ smaller than INT [0].\n\n  -l STR\n  Only output alignments in library STR [null].\n\n  -m INT\n  Only output alignments with number of CIGAR bases consuming query sequence \u2265 INT [0]\n\n  -f INT\n  Only output alignments with all bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n  -F INT\n  Do not output alignments with any bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n  -x STR\n  Read tag to exclude from output (repeatable) [null]\n\n  -B\n  Collapse the backward CIGAR operation.\n\n  -s FLOAT\n  Integer part is used to seed the random number generator [0]. Part after the decimal point sets the fraction of templates/pairs to subsample [no subsampling].\n\n  -@ INT\n  Number of BAM compression threads to use in addition to main thread [0].\n\n  -S\n  Ignored for compatibility with previous samtools versions. Previously this option was required if input was in SAM format, but now the correct format is automatically detected by examining the first few characters of input.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-view\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 4\n\n  - id: \"#region\"\n    type: [\"null\",string]\n    description: |\n      [region ...]\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 2\n      prefix: \"-o\"\n\n  - id: \"#isbam\"\n    type: boolean\n    default: false\n    description: |\n      output in BAM format\n    inputBinding:\n      position: 2\n      prefix: \"-b\"\n\n  - id: \"#iscram\"\n    type: boolean\n    default: false\n    description: |\n      output in CRAM format\n    inputBinding:\n      position: 2\n      prefix: \"-C\"\n\n  - id: \"#fastcompression\"\n    type: boolean\n    default: false\n    description: |\n      use fast BAM compression (implies -b)\n    inputBinding:\n      position: 1\n      prefix: \"-1\"\n\n  - id: \"#uncompressed\"\n    type: boolean\n    default: false\n    description: |\n      uncompressed BAM output (implies -b)\n    inputBinding:\n      position: 1\n      prefix: \"-u\"\n\n  - id: \"#samheader\"\n    type: boolean\n    default: false\n    description: |\n      include header in SAM output\n    inputBinding:\n      position: 1\n      prefix: \"-h\"\n\n  - id: \"#count\"\n    type: boolean\n    default: false\n    description: |\n      print only the count of matching records\n    inputBinding:\n      position: 1\n      prefix: \"-c\"\n\n  - id: \"#referencefasta\"\n    type: [\"null\",File]\n    description: |\n      reference sequence FASTA FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-T\"\n\n  - id: \"#bedoverlap\"\n    type: [\"null\",File]\n    description: |\n      only include reads overlapping this BED FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-L\"\n\n  - id: \"#readsingroup\"\n    type: [\"null\",string]\n    description: |\n      only include reads in read group STR [null]\n    inputBinding:\n      position: 1\n      prefix: \"-r\"\n\n  - id: \"#readsingroupfile\"\n    type: [\"null\",File]\n    description: |\n      only include reads with read group listed in FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-R\"\n\n  - id: \"#readsquality\"\n    type: [\"null\",int]\n    description: |\n      only include reads with mapping quality >= INT [0]\n    inputBinding:\n      position: 1\n      prefix: \"-q\"\n\n  - id: \"#readsinlibrary\"\n    type: [\"null\",string]\n    description: |\n      only include reads in library STR [null]\n    inputBinding:\n      position: 1\n      prefix: \"-l\"\n\n  - id: \"#cigar\"\n    type: [\"null\",int]\n    description: |\n      only include reads with number of CIGAR operations\n      consuming query sequence >= INT [0]\n    inputBinding:\n      position: 1\n      prefix: \"-m\"\n\n  - id: \"#readswithbits\"\n    type: [\"null\",int]\n    description: |\n      only include reads with all bits set in INT set in FLAG [0]\n    inputBinding:\n      position: 1\n      prefix: \"-f\"\n\n  - id: \"#readswithoutbits\"\n    type: [\"null\",int]\n    description: |\n      only include reads with none of the bits set in INT set in FLAG [0]\n    inputBinding:\n      position: 1\n      prefix: \"-F\"\n\n  - id: \"#readtagtostrip\"\n    type:\n      - \"null\"\n      - type: array\n        items: string\n    description: |\n      read tag to strip (repeatable) [null]\n\n  - id: \"#collapsecigar\"\n    type: boolean\n    default: false\n    description: |\n      collapse the backward CIGAR operation\n    inputBinding:\n      position: 1\n      prefix: \"-B\"\n\n  - id: \"#randomseed\"\n    type: [\"null\",float]\n    description: |\n      integer part sets seed of random number generator [0];\n      rest sets fraction of templates to subsample [no subsampling]\n    inputBinding:\n      position: 1\n      prefix: \"-s\"\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    description: |\n      number of BAM compression threads [0]\n    inputBinding:\n      position: 1\n      prefix: \"-@\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"samtools\", \"view\"]\n\narguments:\n  - valueFrom:\n      engine: node-engine.cwl\n      script: |\n        { if ($job['readtagtostrip'])\n            $job['readtagtostrip'].map(function(i) {return \"-x\"+i;});\n          else return [];\n        }\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-view/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-view/version/latest", 
                "image": "quay.io/cancercollaboratory/dockstore-tool-samtools-view:latest", 
                "meta-version": "2015-11-12 22:42:37.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-view/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Prints alignments in the specified input alignment file.\n\n  With no options or regions specified, prints all alignments in the specified input alignment file (in SAM, BAM, or CRAM format) to standard output in SAM format (with no header).\n\n  You may specify one or more space-separated region specifications after the input filename to restrict output to only those alignments which overlap the specified region(s). Use of region specifications requires a coordinate-sorted and indexed input file (in BAM or CRAM format).\n\n  The -b, -C, -1, -u, -h, -H, and -c options change the output format from the default of headerless SAM, and the -o and -U options set the output file name(s).\n\n  The -t and -T options provide additional reference data. One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.\n\n  The -L, -r, -R, -q, -l, -m, -f, and -F options filter the alignments that will be included in the output to only those alignments that match certain criteria.\n\n  The -x, -B, and -s options modify the data which is contained in each alignment.\n\n  Finally, the -@ option can be used to allocate additional threads to be used for compression, and the -? option requests a long help message.\n\n  Usage: samtools view [options] in.bam|in.sam|in.cram [region...]\n\n  Regions can be specified as: RNAME[:STARTPOS[-ENDPOS]] and all position coordinates are 1-based.\n\n  Important note: when multiple regions are given, some alignments may be output multiple times if they overlap more than one of the specified regions.\n\n  Examples of region specifications:\n\n  `chr1'\n  Output all alignments mapped to the reference sequence named `chr1' (i.e. @SQ SN:chr1) .\n\n  `chr2:1000000'\n  The region on chr2 beginning at base position 1,000,000 and ending at the end of the chromosome.\n\n  `chr3:1000-2000'\n  The 1001bp region on chr3 beginning at base position 1,000 and ending at base position 2,000 (including both end positions).\n\n  OPTIONS:\n\n  -b\n  Output in the BAM format.\n\n  -C\n  Output in the CRAM format (requires -T).\n\n  -1\n  Enable fast BAM compression (implies -b).\n\n  -u\n  Output uncompressed BAM. This option saves time spent on compression/decompression and is thus preferred when the output is piped to another samtools command.\n\n  -h\n  Include the header in the output.\n\n  -H\n  Output the header only.\n\n  -c\n  Instead of printing the alignments, only count them and print the total number. All filter options, such as -f, -F, and -q, are taken into account.\n\n  -?\n  Output long help and exit immediately.\n\n  -o FILE\n  Output to FILE [stdout].\n\n  -U FILE\n  Write alignments that are not selected by the various filter options to FILE. When this option is used, all alignments (or all alignments intersecting the regions specified) are written to either the output file or this file, but never both.\n\n  -t FILE\n  A tab-delimited FILE. Each line must contain the reference name in the first column and the length of the reference in the second column, with one line for each distinct reference. Any additional fields beyond the second column are ignored. This file also defines the order of the reference sequences in sorting. If you run: `samtools faidx <ref.fa>', the resulting index file <ref.fa>.fai can be used as this FILE.\n\n  -T FILE\n  A FASTA format reference FILE, optionally compressed by bgzip and ideally indexed by samtools faidx. If an index is not present, one will be generated for you.\n\n  -L FILE\n  Only output alignments overlapping the input BED FILE [null].\n\n  -r STR\n  Only output alignments in read group STR [null].\n\n  -R FILE\n  Output alignments in read groups listed in FILE [null].\n\n  -q INT\n  Skip alignments with MAPQ smaller than INT [0].\n\n  -l STR\n  Only output alignments in library STR [null].\n\n  -m INT\n  Only output alignments with number of CIGAR bases consuming query sequence \u2265 INT [0]\n\n  -f INT\n  Only output alignments with all bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n  -F INT\n  Do not output alignments with any bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n  -x STR\n  Read tag to exclude from output (repeatable) [null]\n\n  -B\n  Collapse the backward CIGAR operation.\n\n  -s FLOAT\n  Integer part is used to seed the random number generator [0]. Part after the decimal point sets the fraction of templates/pairs to subsample [no subsampling].\n\n  -@ INT\n  Number of BAM compression threads to use in addition to main thread [0].\n\n  -S\n  Ignored for compatibility with previous samtools versions. Previously this option was required if input was in SAM format, but now the correct format is automatically detected by examining the first few characters of input.\n\ndct:contributor:\n  foaf:name: Andy Yang\n  foaf:mbox: \"mailto:ayang@oicr.on.ca\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0001-9102-5681\"\n  foaf:name: \"Andrey Kartashov\"\n  foaf:mbox: \"mailto:Andrey.Kartashov@cchmc.org\"\n\ndct:description: \"Developed at Cincinnati Children\u2019s Hospital Medical Center for the CWL consortium http://commonwl.org/ Original URL: https://github.com/common-workflow-language/workflows\"\n\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/cancercollaboratory/dockstore-tool-samtools-view\"\n  - { import: node-engine.cwl }\n\ninputs:\n  - id: \"#input\"\n    type: File\n    description: |\n      Input bam file.\n    inputBinding:\n      position: 4\n\n  - id: \"#region\"\n    type: [\"null\",string]\n    description: |\n      [region ...]\n    inputBinding:\n      position: 5\n\n  - id: \"#output_name\"\n    type: string\n    inputBinding:\n      position: 2\n      prefix: \"-o\"\n\n  - id: \"#isbam\"\n    type: boolean\n    default: false\n    description: |\n      output in BAM format\n    inputBinding:\n      position: 2\n      prefix: \"-b\"\n\n  - id: \"#iscram\"\n    type: boolean\n    default: false\n    description: |\n      output in CRAM format\n    inputBinding:\n      position: 2\n      prefix: \"-C\"\n\n  - id: \"#fastcompression\"\n    type: boolean\n    default: false\n    description: |\n      use fast BAM compression (implies -b)\n    inputBinding:\n      position: 1\n      prefix: \"-1\"\n\n  - id: \"#uncompressed\"\n    type: boolean\n    default: false\n    description: |\n      uncompressed BAM output (implies -b)\n    inputBinding:\n      position: 1\n      prefix: \"-u\"\n\n  - id: \"#samheader\"\n    type: boolean\n    default: false\n    description: |\n      include header in SAM output\n    inputBinding:\n      position: 1\n      prefix: \"-h\"\n\n  - id: \"#count\"\n    type: boolean\n    default: false\n    description: |\n      print only the count of matching records\n    inputBinding:\n      position: 1\n      prefix: \"-c\"\n\n  - id: \"#referencefasta\"\n    type: [\"null\",File]\n    description: |\n      reference sequence FASTA FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-T\"\n\n  - id: \"#bedoverlap\"\n    type: [\"null\",File]\n    description: |\n      only include reads overlapping this BED FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-L\"\n\n  - id: \"#readsingroup\"\n    type: [\"null\",string]\n    description: |\n      only include reads in read group STR [null]\n    inputBinding:\n      position: 1\n      prefix: \"-r\"\n\n  - id: \"#readsingroupfile\"\n    type: [\"null\",File]\n    description: |\n      only include reads with read group listed in FILE [null]\n    inputBinding:\n      position: 1\n      prefix: \"-R\"\n\n  - id: \"#readsquality\"\n    type: [\"null\",int]\n    description: |\n      only include reads with mapping quality >= INT [0]\n    inputBinding:\n      position: 1\n      prefix: \"-q\"\n\n  - id: \"#readsinlibrary\"\n    type: [\"null\",string]\n    description: |\n      only include reads in library STR [null]\n    inputBinding:\n      position: 1\n      prefix: \"-l\"\n\n  - id: \"#cigar\"\n    type: [\"null\",int]\n    description: |\n      only include reads with number of CIGAR operations\n      consuming query sequence >= INT [0]\n    inputBinding:\n      position: 1\n      prefix: \"-m\"\n\n  - id: \"#readswithbits\"\n    type: [\"null\",int]\n    description: |\n      only include reads with all bits set in INT set in FLAG [0]\n    inputBinding:\n      position: 1\n      prefix: \"-f\"\n\n  - id: \"#readswithoutbits\"\n    type: [\"null\",int]\n    description: |\n      only include reads with none of the bits set in INT set in FLAG [0]\n    inputBinding:\n      position: 1\n      prefix: \"-F\"\n\n  - id: \"#readtagtostrip\"\n    type:\n      - \"null\"\n      - type: array\n        items: string\n    description: |\n      read tag to strip (repeatable) [null]\n\n  - id: \"#collapsecigar\"\n    type: boolean\n    default: false\n    description: |\n      collapse the backward CIGAR operation\n    inputBinding:\n      position: 1\n      prefix: \"-B\"\n\n  - id: \"#randomseed\"\n    type: [\"null\",float]\n    description: |\n      integer part sets seed of random number generator [0];\n      rest sets fraction of templates to subsample [no subsampling]\n    inputBinding:\n      position: 1\n      prefix: \"-s\"\n\n  - id: \"#threads\"\n    type: [\"null\",int]\n    description: |\n      number of BAM compression threads [0]\n    inputBinding:\n      position: 1\n      prefix: \"-@\"\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_name\n\nbaseCommand: [\"samtools\", \"view\"]\n\narguments:\n  - valueFrom:\n      engine: node-engine.cwl\n      script: |\n        { if ($job['readtagtostrip'])\n            $job['readtagtostrip'].map(function(i) {return \"-x\"+i;});\n          else return [];\n        }\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-samtools-view/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:15.04\n\nENV VERSION=\"1.2\"\nENV NAME=\"samtools\"\n\nENV URL=\"https://github.com/samtools/samtools/archive/${VERSION}.tar.gz\"\n#https://github.com/samtools/htslib/archive/1.2.1.tar.gz\n\nRUN  apt-get update \\\n  && apt-get install -y wget \\\n  && apt-get install -y git\n\nRUN  apt-get install -y build-essential \\\n  && apt-get install -y zlib1g-dev libncurses5-dev \\\n  && apt-get install -y libpng-dev\n\nRUN  set -xe \\\n  && git clone --branch=develop https://github.com/samtools/htslib.git \\\n  && cd htslib \\\n  && make \\\n  && make test \\\n  && make install\n\nRUN wget -q -O ${NAME}.tar.gz ${URL} && tar -zxvf ${NAME}.tar.gz && rm -f ./${NAME}.tar.gz && cd ${NAME}-${VERSION} && make -j 2 && cd .. && cp ./${NAME}-${VERSION}/${NAME} ./ && rm -rf ./${NAME}-${VERSION}/ && strip ${NAME}\n\nRUN mv /samtools /usr/local/bin/\n\nRUN rm -f ./${NAME} \\\n  && rm -rf /var/lib/apt/lists/*\n"
                }
            }
        ], 
        "name": "dockstore-tool-samtools-view", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Andrey Kartashov", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcancercollaboratory%252Fdockstore-tool-samtools-view", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "cancercollaboratory", 
        "registry-id": "quay.io/cancercollaboratory/dockstore-tool-samtools-view", 
        "description": "Prints alignments in the specified input alignment file.\n\nWith no options or regions specified, prints all alignments in the specified input alignment file (in SAM, BAM, or CRAM format) to standard output in SAM format (with no header).\n\nYou may specify one or more space-separated region specifications after the input filename to restrict output to only those alignments which overlap the specified region(s). Use of region specifications requires a coordinate-sorted and indexed input file (in BAM or CRAM format).\n\nThe -b, -C, -1, -u, -h, -H, and -c options change the output format from the default of headerless SAM, and the -o and -U options set the output file name(s).\n\nThe -t and -T options provide additional reference data. One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.\n\nThe -L, -r, -R, -q, -l, -m, -f, and -F options filter the alignments that will be included in the output to only those alignments that match certain criteria.\n\nThe -x, -B, and -s options modify the data which is contained in each alignment.\n\nFinally, the -@ option can be used to allocate additional threads to be used for compression, and the -? option requests a long help message.\n\nUsage: samtools view [options] in.bam|in.sam|in.cram [region...]\n\nRegions can be specified as: RNAME[:STARTPOS[-ENDPOS]] and all position coordinates are 1-based.\n\nImportant note: when multiple regions are given, some alignments may be output multiple times if they overlap more than one of the specified regions.\n\nExamples of region specifications:\n\n`chr1'\nOutput all alignments mapped to the reference sequence named `chr1' (i.e. @SQ SN:chr1) .\n\n`chr2:1000000'\nThe region on chr2 beginning at base position 1,000,000 and ending at the end of the chromosome.\n\n`chr3:1000-2000'\nThe 1001bp region on chr3 beginning at base position 1,000 and ending at base position 2,000 (including both end positions).\n\nOPTIONS:\n\n-b\nOutput in the BAM format.\n\n-C\nOutput in the CRAM format (requires -T).\n\n-1\nEnable fast BAM compression (implies -b).\n\n-u\nOutput uncompressed BAM. This option saves time spent on compression/decompression and is thus preferred when the output is piped to another samtools command.\n\n-h\nInclude the header in the output.\n\n-H\nOutput the header only.\n\n-c\nInstead of printing the alignments, only count them and print the total number. All filter options, such as -f, -F, and -q, are taken into account.\n\n-?\nOutput long help and exit immediately.\n\n-o FILE\nOutput to FILE [stdout].\n\n-U FILE\nWrite alignments that are not selected by the various filter options to FILE. When this option is used, all alignments (or all alignments intersecting the regions specified) are written to either the output file or this file, but never both.\n\n-t FILE\nA tab-delimited FILE. Each line must contain the reference name in the first column and the length of the reference in the second column, with one line for each distinct reference. Any additional fields beyond the second column are ignored. This file also defines the order of the reference sequences in sorting. If you run: `samtools faidx <ref.fa>', the resulting index file <ref.fa>.fai can be used as this FILE.\n\n-T FILE\nA FASTA format reference FILE, optionally compressed by bgzip and ideally indexed by samtools faidx. If an index is not present, one will be generated for you.\n\n-L FILE\nOnly output alignments overlapping the input BED FILE [null].\n\n-r STR\nOnly output alignments in read group STR [null].\n\n-R FILE\nOutput alignments in read groups listed in FILE [null].\n\n-q INT\nSkip alignments with MAPQ smaller than INT [0].\n\n-l STR\nOnly output alignments in library STR [null].\n\n-m INT\nOnly output alignments with number of CIGAR bases consuming query sequence \u2265 INT [0]\n\n-f INT\nOnly output alignments with all bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n-F INT\nDo not output alignments with any bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].\n\n-x STR\nRead tag to exclude from output (repeatable) [null]\n\n-B\nCollapse the backward CIGAR operation.\n\n-s FLOAT\nInteger part is used to seed the random number generator [0]. Part after the decimal point sets the fraction of templates/pairs to subsample [no subsampling].\n\n-@ INT\nNumber of BAM compression threads to use in addition to main thread [0].\n\n-S\nIgnored for compatibility with previous samtools versions. Previously this option was required if input was in SAM format, but now the correct format is automatically detected by examining the first few characters of input."
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-kallisto/version/master", 
                "image": "quay.io/collaboratory/dockstore-tool-kallisto:master", 
                "meta-version": "2015-11-10 22:18:45.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-kallisto/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage:   Available at https://pachterlab.github.io/kallisto/manual.html\n\ndct:creator:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-kallisto\n\ninputs:\n\n# common parameters\n\n  - id: \"#mode\"\n    inputBinding:\n      position: 1 \n    type: \n      type: enum\n      name: \"mode\"\n      symbols: [\"index\",\"quant\"]\n\n  - id: \"#index_name\"\n    type: [\"null\",string] \n    inputBinding:\n      position: 2 \n      prefix: \"-i\"\n\n  - id: \"#output_files\"\n    type:  \n      - type: array\n        items: string \n\n# parameters for kallisto index specifically\n\n  - id: \"#kmer-size\"\n    type: [\"null\",int]\n    inputBinding:\n      position: 10 \n      prefix: \"-k\"\n\n  - id: \"#fasta\"\n    type: [\"null\",File] \n    inputBinding:\n      position: 20  \n\n# parameters for kallisto quant specifically\n\n  - id: \"#quant_output_name\"\n    type: [\"null\",string] \n    inputBinding:\n      position: 50 \n      prefix: \"-o\"\n\n  - id: \"#index_input\"\n    type: [\"null\",File] \n    inputBinding:\n      position: 20  \n      prefix: \"-i\"\n\n  - id: \"#fastq\"\n    type:  \n      - \"null\"\n      - type: array\n        items: File\n    inputBinding:\n      position: 60  \n\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_files\n\nbaseCommand: []\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-kallisto/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:12.04\nMAINTAINER help@cancercollaboratory.org\nENV version=0.42.4\nRUN apt-get update && apt-get install -y wget\nRUN wget --no-check-certificate https://github.com/pachterlab/kallisto/releases/download/v${version}/kallisto_linux-v${version}.tar.gz\nRUN tar -xvzf kallisto_linux-v${version}.tar.gz\n\nRUN cp kallisto_linux-v${version}/kallisto /usr/local/bin/\nCOPY wrapper.sh /opt/kallisto/\n\nRUN mkdir /data && chmod a+wrx /data\nWORKDIR /data\n\nUSER root\nENTRYPOINT [\"sh\", \"/opt/kallisto/wrapper.sh\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-kallisto/version/latest", 
                "image": "quay.io/collaboratory/dockstore-tool-kallisto:latest", 
                "meta-version": "2015-11-10 22:18:46.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-kallisto/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\n\ndescription: |\n  Usage:   Available at https://pachterlab.github.io/kallisto/manual.html\n\ndct:creator:\n  \"@id\": \"http://orcid.org/orcid.org/0000-0002-6130-1021\"\n  foaf:name: Denis Yuen\n  foaf:mbox: \"mailto:help@cancercollaboratory.org\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/dockstore-tool-kallisto\n\ninputs:\n\n# common parameters\n\n  - id: \"#mode\"\n    inputBinding:\n      position: 1 \n    type: \n      type: enum\n      name: \"mode\"\n      symbols: [\"index\",\"quant\"]\n\n  - id: \"#index_name\"\n    type: [\"null\",string] \n    inputBinding:\n      position: 2 \n      prefix: \"-i\"\n\n  - id: \"#output_files\"\n    type:  \n      - type: array\n        items: string \n\n# parameters for kallisto index specifically\n\n  - id: \"#kmer-size\"\n    type: [\"null\",int]\n    inputBinding:\n      position: 10 \n      prefix: \"-k\"\n\n  - id: \"#fasta\"\n    type: [\"null\",File] \n    inputBinding:\n      position: 20  \n\n# parameters for kallisto quant specifically\n\n  - id: \"#quant_output_name\"\n    type: [\"null\",string] \n    inputBinding:\n      position: 50 \n      prefix: \"-o\"\n\n  - id: \"#index_input\"\n    type: [\"null\",File] \n    inputBinding:\n      position: 20  \n      prefix: \"-i\"\n\n  - id: \"#fastq\"\n    type:  \n      - \"null\"\n      - type: array\n        items: File\n    inputBinding:\n      position: 60  \n\n\noutputs:\n  - id: \"#output\"\n    type: File\n    outputBinding:\n      glob:\n        engine: cwl:JsonPointer\n        script: /job/output_files\n\nbaseCommand: []\n\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/CancerCollaboratory/dockstore-tool-kallisto/master/Dockerfile", 
                    "dockerfile": "FROM ubuntu:12.04\nMAINTAINER help@cancercollaboratory.org\nENV version=0.42.4\nRUN apt-get update && apt-get install -y wget\nRUN wget --no-check-certificate https://github.com/pachterlab/kallisto/releases/download/v${version}/kallisto_linux-v${version}.tar.gz\nRUN tar -xvzf kallisto_linux-v${version}.tar.gz\n\nRUN cp kallisto_linux-v${version}/kallisto /usr/local/bin/\nCOPY wrapper.sh /opt/kallisto/\n\nRUN mkdir /data && chmod a+wrx /data\nWORKDIR /data\n\nUSER root\nENTRYPOINT [\"sh\", \"/opt/kallisto/wrapper.sh\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-kallisto", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Denis Yuen", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fdockstore-tool-kallisto", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/dockstore-tool-kallisto", 
        "description": "Usage:   Available at https://pachterlab.github.io/kallisto/manual.html"
    }, 
    {
        "versions": [
            {
                "name": "test", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fhello-world-workflow/version/test", 
                "image": "quay.io/collaboratory/hello-world-workflow:test", 
                "meta-version": "2016-01-07 19:25:14.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/test/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a helloworld SeqWare workflow container\n# Based on SeqWare that knows how to read/write to S3\n#############################################################\n\n# Set the base image to SeqWare\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time\n\n# LEFT OFF WITH: need to install the s3 command line tools\n\n# Build the workflow\nCOPY workflow-HelloWorld /home/seqware/workflow-HelloWorld\nRUN chown -R seqware /home/seqware/workflow-HelloWorld\nUSER seqware\nWORKDIR /home/seqware/workflow-HelloWorld/\nRUN mvn clean install\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fhello-world-workflow/version/master", 
                "image": "quay.io/collaboratory/hello-world-workflow:master", 
                "meta-version": "2016-02-23 17:35:02.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"Markdown description text here\"\nid: \"HelloWorld\"\nlabel: \"HelloWorld Tool\"\n\ncwlVersion: \"cwl:draft-3.dev3\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0003-3566-7705\"\n  foaf:name: Peter Amstutz\n  foaf:mbox: \"mailto:peter.amstutz@curoverse.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/collaboratory/workflow-helloworld:master\"\n  - class: InlineJavascriptRequirement\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8092\n    outdirMin: 512000\n    description: \"these parameters are used to locate a VM with appropriate resources\"\n\ninputs:\n  - id: \"#ref_file_1\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#ref_file_2\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#hello_input\"\n    type: File\n    description: \"this describes an input file that should be provided before execution\"\n\n  - id: \"#arrayed_input\"\n    type:\n      type: array\n      items: File\n    description: \"this demonstrates a workflow that takes an array of inputs, at least 2\"\n\noutputs:\n  - id: \"#hello_output\"\n    type: File\n    outputBinding:\n      glob: hello-output.txt\n    description: \"this describes an output file that should be saved after execution\"\n\n  - id: \"#wc_output\"\n    type:\n      type: array\n      items: File \n    outputBinding:\n      glob: wc-output*.txt\n    description: \"this describes an output file that should be saved after execution\"\n\n\nbaseCommand: [\"bash\", \"-c\"]\narguments:\n  - valueFrom:\n        $(\"cat \" + inputs.hello_input.path + \" > hello-output.txt &&\"\n            + \" ls \" + inputs.ref_file_1.path + \" >> hello-output.txt && \"\n            + \" head -20 \" + inputs.ref_file_2.path + \" >> hello-output.txt && \"\n            + \" wc -l \" + inputs.arrayed_input[0].path + \" >> wc-output0.txt &&\"\n            + \" wc -l \" + inputs.arrayed_input[1].path + \" >> wc-output1.txt\")\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/master/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a helloworld SeqWare workflow container\n# Based on SeqWare that knows how to read/write to S3\n#############################################################\n\n# Set the base image to SeqWare\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time\n\n# LEFT OFF WITH: need to install the s3 command line tools\n\n# Build the workflow\nCOPY workflow-HelloWorld /home/seqware/workflow-HelloWorld\nRUN chown -R seqware /home/seqware/workflow-HelloWorld\nUSER seqware\nWORKDIR /home/seqware/workflow-HelloWorld/\nRUN mvn clean install\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "draft3", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fhello-world-workflow/version/draft3", 
                "image": "quay.io/collaboratory/hello-world-workflow:draft3", 
                "meta-version": "2016-01-12 22:00:44.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/draft3/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"Markdown description text here\"\nid: \"HelloWorld\"\nlabel: \"HelloWorld Tool\"\n\ncwlVersion: \"cwl:draft-3.dev3\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0003-3566-7705\"\n  foaf:name: Peter Amstutz\n  foaf:mbox: \"mailto:peter.amstutz@curoverse.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/collaboratory/workflow-helloworld:master\"\n  - class: InlineJavascriptRequirement\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8092\n    outdirMin: 512000\n    description: \"these parameters are used to locate a VM with appropriate resources\"\n\ninputs:\n  - id: \"#ref_file_1\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#ref_file_2\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#hello_input\"\n    type: File\n    description: \"this describes an input file that should be provided before execution\"\n\noutputs:\n  - id: \"#hello_output\"\n    type: File\n    outputBinding:\n      glob: hello-output.txt\n    description: \"this describes an output file that should be saved after execution\"\n\nbaseCommand: [\"bash\", \"-c\"]\narguments:\n  - valueFrom: $(\"cat \" + inputs.hello_input.path + \" > hello-output.txt &&\"\n              + \" ls \" + inputs.ref_file_1.path + \" >> hello-output.txt && \"\n              + \" head -20 \" + inputs.ref_file_2.path + \" >> hello-output.txt\")\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/draft3/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a helloworld SeqWare workflow container\n# Based on SeqWare that knows how to read/write to S3\n#############################################################\n\n# Set the base image to SeqWare\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time\n\n# LEFT OFF WITH: need to install the s3 command line tools\n\n# Build the workflow\nCOPY workflow-HelloWorld /home/seqware/workflow-HelloWorld\nRUN chown -R seqware /home/seqware/workflow-HelloWorld\nUSER seqware\nWORKDIR /home/seqware/workflow-HelloWorld/\nRUN mvn clean install\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fhello-world-workflow/version/latest", 
                "image": "quay.io/collaboratory/hello-world-workflow:latest", 
                "meta-version": "2016-02-23 17:35:06.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"Markdown description text here\"\nid: \"HelloWorld\"\nlabel: \"HelloWorld Tool\"\n\ncwlVersion: \"cwl:draft-3.dev3\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0003-3566-7705\"\n  foaf:name: Peter Amstutz\n  foaf:mbox: \"mailto:peter.amstutz@curoverse.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/collaboratory/workflow-helloworld:master\"\n  - class: InlineJavascriptRequirement\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 8\n    ramMin: 8092\n    outdirMin: 512000\n    description: \"these parameters are used to locate a VM with appropriate resources\"\n\ninputs:\n  - id: \"#ref_file_1\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#ref_file_2\"\n    type: File\n    description: \"this describes a large reference file that does not change between runs\"\n\n  - id: \"#hello_input\"\n    type: File\n    description: \"this describes an input file that should be provided before execution\"\n\n  - id: \"#arrayed_input\"\n    type:\n      type: array\n      items: File\n    description: \"this demonstrates a workflow that takes an array of inputs, at least 2\"\n\noutputs:\n  - id: \"#hello_output\"\n    type: File\n    outputBinding:\n      glob: hello-output.txt\n    description: \"this describes an output file that should be saved after execution\"\n\n  - id: \"#wc_output\"\n    type:\n      type: array\n      items: File \n    outputBinding:\n      glob: wc-output*.txt\n    description: \"this describes an output file that should be saved after execution\"\n\n\nbaseCommand: [\"bash\", \"-c\"]\narguments:\n  - valueFrom:\n        $(\"cat \" + inputs.hello_input.path + \" > hello-output.txt &&\"\n            + \" ls \" + inputs.ref_file_1.path + \" >> hello-output.txt && \"\n            + \" head -20 \" + inputs.ref_file_2.path + \" >> hello-output.txt && \"\n            + \" wc -l \" + inputs.arrayed_input[0].path + \" >> wc-output0.txt &&\"\n            + \" wc -l \" + inputs.arrayed_input[1].path + \" >> wc-output1.txt\")\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/denis-yuen/hello-world-workflow/master/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a helloworld SeqWare workflow container\n# Based on SeqWare that knows how to read/write to S3\n#############################################################\n\n# Set the base image to SeqWare\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time\n\n# LEFT OFF WITH: need to install the s3 command line tools\n\n# Build the workflow\nCOPY workflow-HelloWorld /home/seqware/workflow-HelloWorld\nRUN chown -R seqware /home/seqware/workflow-HelloWorld\nUSER seqware\nWORKDIR /home/seqware/workflow-HelloWorld/\nRUN mvn clean install\nCMD [\"/bin/bash\"]\n"
                }
            }
        ], 
        "name": "hello-world-workflow", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Peter Amstutz", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fcollaboratory%252Fhello-world-workflow", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "collaboratory", 
        "registry-id": "quay.io/collaboratory/hello-world-workflow", 
        "description": "Markdown description text here"
    }, 
    {
        "versions": [
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-sanger-cgp-workflow/version/master", 
                "image": "quay.io/pancancer/pcawg-sanger-cgp-workflow:master", 
                "meta-version": "2016-04-07 15:45:17.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/master/Dockstore.wdl", 
                    "descriptor": "task Seqware_Sanger_Somatic_Workflow {\n    File tumor\n    File normal\n    File refFrom\n    File bbFrom\n    String outputDir\n\n    command {\n        python /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py \\\n        --tumor ${tumor} \\\n        --normal ${normal} \\\n        --refFrom ${refFrom} \\\n        --bbFrom ${bbFrom}\n        --output-dir ${outputDir}\n    }\n\n    output {\n        Array[File] somatic_snv_mnv_tar_gz = glob('${outputDir}*.somatic.snv_mnv.tar.gz')\n        Array[File] somatic_cnv_tar_gz = glob('${outputDir}*.somatic.cnv.tar.gz')\n        Array[File] somatic_sv_tar_gz = glob('${outputDir}*.somatic.sv.tar.gz')\n        Array[File] somatic_indel_tar_gz = glob('${outputDir}*.somatic.indel.tar.gz')\n        Array[File] somatic_imputeCounts_tar_gz = glob('${outputDir}*.somatic.imputeCounts.tar.gz')\n        Array[File] somatic_genotype_tar_gz = glob('${outputDir}*.somatic.genotype.tar.gz')\n        Array[File] somatic_verifyBamId_tar_gz = glob('${outputDir}*.somatic.verifyBamId.tar.gz')\n    }\n\n    runtime {\n        docker: 'quay.io/TBD'\n    }\n}\n\nworkflow Seqware_Sanger_Somatic_Workflow {\n    call Seqware_Sanger_Somatic_Workflow\n}\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/master/Dockerfile", 
                    "dockerfile": "FROM pancancer/seqware_whitestar_pancancer:1.1.2\n\nENV SANGER_VERSION 1.0.8\nLABEL SANGER_VERSION $SANGER_VERSION\n\nUSER root\n\n### START of CGP INSTALL ###\n\nENV OPT /opt/wtsi-cgp\nENV PATH $OPT/bin:$PATH\nENV PERL5LIB $OPT/lib/perl5:$PERL5LIB\n\nRUN apt-get -yqq update && \\\n    apt-get -yqq install libreadline6-dev build-essential autoconf software-properties-common python-software-properties \\\n      wget time curl zlib1g-dev libncurses5-dev \\\n      libgd2-xpm-dev libexpat1-dev python unzip libboost-dev libboost-iostreams-dev \\\n      libpstreams-dev libglib2.0-dev gfortran libcairo2-dev cpanminus libwww-perl \\\n      openjdk-7-jdk && \\\n    apt-get clean\n\nRUN mkdir -p /tmp/downloads $OPT/bin $OPT/etc $OPT/lib $OPT/share\nWORKDIR /tmp/downloads\n\nRUN cpanm --mirror http://cpan.metacpan.org -l $OPT File::ShareDir File::ShareDir::Install Bio::Root::Version Const::Fast Graph && \\\n     rm -rf ~/.cpanm\n\nRUN export SOURCE_JKENT_BIN=https://github.com/ENCODE-DCC/kentUtils/raw/master/bin/linux.x86_64 && \\\n    curl -sSL -o $OPT/bin/wigToBigWig -C - --retry 10 ${SOURCE_JKENT_BIN}/wigToBigWig && chmod +x $OPT/bin/wigToBigWig && \\\n    curl -sSL -o $OPT/bin/bigWigMerge -C - --retry 10 ${SOURCE_JKENT_BIN}/bigWigMerge && chmod +x $OPT/bin/bigWigMerge\n\n#BWA\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/lh3/bwa/archive/0.7.12.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    make  && \\\n    cp bwa $OPT/bin/. && \\\n    rm -rf *\n\n#BIOBAMBAM\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/gt1/biobambam2/releases/download/2.0.25-release-20151105154334/biobambam2-2.0.25-release-20151105154334-x86_64-etch-linux-gnu.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    rm -f bin/curl && \\\n    cp -r bin/* $OPT/bin/. && \\\n    cp -r etc/* $OPT/etc/. && \\\n    cp -r lib/* $OPT/lib/. && \\\n    cp -r share/* $OPT/share/. && \\\n    rm -rf *\n\n# htslib - used multiple times later\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/htslib/archive/1.2.1.tar.gz && \\\n    mkdir /tmp/downloads/htslib && \\\n    tar -C /tmp/downloads/htslib --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/htslib && \\\n    rm -f /tmp/downloads/tmp.tar.gz\n\nENV HTSLIB /tmp/downloads/htslib\n\n# legacy samtools\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/samtools/archive/0.1.20.tar.gz && \\\n    mkdir /tmp/downloads/samtools && \\\n    tar -C /tmp/downloads/samtools --strip-components 1 -zxf tmp.tar.gz && \\\n    perl -i -pe 's/^CFLAGS=\\s*/CFLAGS=-fPIC / unless /\\b-fPIC\\b/' samtools/Makefile && \\\n    make -C samtools && \\\n    cp samtools/samtools $OPT/bin/. && \\\n    export SAMTOOLS=/tmp/downloads/samtools && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT Bio::DB::Sam && \\\n    rm -rf /tmp/downloads/samtools /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# bam_stats + PCAP build\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/ICGC-TCGA-PanCancer/PCAP-core/archive/v1.13.1.tar.gz && \\\n    mkdir /tmp/downloads/PCAP && \\\n    tar -C /tmp/downloads/PCAP --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/PCAP/c && \\\n    cp /tmp/downloads/PCAP/bin/bam_stats $OPT/bin/. && \\\n    make -C /tmp/downloads/PCAP/c clean && \\\n    cd /tmp/downloads/PCAP && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/PCAP /tmp/downloads/tmp.tar.gz ~/.cpanm\n\nRUN curl -sSL -o tmp.zip --retry 10 https://github.com/samtools/tabix/archive/master.zip && \\\n    unzip -q tmp.zip && \\\n    cd /tmp/downloads/tabix-master && \\\n    make && \\\n    cp tabix $OPT/bin/. && \\\n    cp bgzip $OPT/bin/. && \\\n    cd perl && \\\n    perl Makefile.PL INSTALL_BASE=$INST_PATH && \\\n    make && make test && make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/tabix-master /tmp/downloads/tmp.zip\n\n# start of cgpVcf block\n# the commit UUID for the release of cgpVcf in use\n\nENV CGPVCF_UUID 5cc538ded838a4ba94feedff1b51ee3ebc4b65f4\n\n# build vcftools using patch from cgpVcf release\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://sourceforge.net/projects/vcftools/files/vcftools_0.1.12a.tar.gz/download && \\\n    mkdir /tmp/downloads/vcftools && \\\n    tar -C /tmp/downloads/vcftools --strip-components 1 -zxf /tmp/downloads/tmp.tar.gz && \\\n    cd /tmp/downloads/vcftools && \\\n    curl -sSL -o vcfToolsInstLocs.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsInstLocs.diff && \\\n    patch Makefile < vcfToolsInstLocs.diff && \\\n    curl -sSL -o vcfToolsProcessLog.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsProcessLog.diff && \\\n    patch perl/Vcf.pm < vcfToolsProcessLog.diff && \\\n    make  PREFIX=$OPT && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/vcftools /tmp/downloads/tmp.tar.gz\n\n# bedtools, make sure it is a suitable version without the input switch\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/arq5x/bedtools2/releases/download/v2.21.0/bedtools-2.21.0.tar.gz && \\\n    mkdir /tmp/downloads/bedtools2 && \\\n    tar -C /tmp/downloads/bedtools2 --strip-components 1 -zxf tmp.tar.gz && \\\n    make  -C /tmp/downloads/bedtools2 && \\\n    cp /tmp/downloads/bedtools2/bin/* $OPT/bin/. && \\\n    rm -rf /tmp/downloads/bedtools2 /tmp/downloads/tmp.tar.gz\n\n# cgpVcf\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpVcf/archive/v1.3.1.tar.gz && \\\n    mkdir /tmp/downloads/cgpVcf && \\\n    tar -C /tmp/downloads/cgpVcf --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpVcf && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpVcf /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# alleleCount - only want C version\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/alleleCount/archive/v2.1.2.tar.gz && \\\n    mkdir /tmp/downloads/alleleCount && \\\n    tar -C /tmp/downloads/alleleCount --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/alleleCount/c && \\\n    mkdir bin && \\\n    make && \\\n    cp /tmp/downloads/alleleCount/c/bin/alleleCounter $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/alleleCount /tmp/downloads/tmp.tar.gz\n\n# verifyBamId\nRUN curl -sSL -o $OPT/bin/verifyBamId --retry 10 https://github.com/statgen/verifyBamID/releases/download/v1.1.2/verifyBamID.1.1.2 && \\\n    chmod +x $OPT/bin/verifyBamId && \\\n    rm -f /tmp/downloads/verifyBamId\n\n# cgpNgsQc\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpNgsQc/archive/v1.1.0.tar.gz && \\\n    mkdir /tmp/downloads/cgpNgsQc && \\\n    tar -C /tmp/downloads/cgpNgsQc --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpNgsQc && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpNgsQc /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# ascatNgs\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/ascatNgs/archive/v1.7.1.tar.gz && \\\n    mkdir /tmp/downloads/ascatNgs && \\\n    tar -C /tmp/downloads/ascatNgs --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/ascatNgs/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/ascatNgs /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpPindel\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpPindel/archive/v1.5.5.tar.gz && \\\n    mkdir /tmp/downloads/cgpPindel && \\\n    tar -C /tmp/downloads/cgpPindel --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpPindel && \\\n    g++ -O3 -o $OPT/bin/pindel c++/pindel.cpp && \\\n    g++ -O3 -o $OPT/bin/filter_pindel_reads c++/filter_pindel_reads.cpp && \\\n    cd /tmp/downloads/cgpPindel/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpPindel /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpCaVEManPostProcessing\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManPostProcessing/archive/1.5.3.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManPostProcessing && \\\n    tar -C /tmp/downloads/cgpCaVEManPostProcessing --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManPostProcessing && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManPostProcessing /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# CaVEMan\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/CaVEMan/archive/1.9.1.tar.gz && \\\n    mkdir /tmp/downloads/CaVEMan && \\\n    tar -C /tmp/downloads/CaVEMan --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/CaVEMan && \\\n    make && \\\n    cp /tmp/downloads/CaVEMan/bin/caveman $OPT/bin/. && \\\n    cp /tmp/downloads/CaVEMan/bin/mergeCavemanResults $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/CaVEMan /tmp/downloads/tmp.tar.gz ~/.cpanm ~/.cache/hts-ref\n\n\n# cgpCaVEManWrapper\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManWrapper/archive/1.9.2.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManWrapper && \\\n    tar -C /tmp/downloads/cgpCaVEManWrapper --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManWrapper && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManWrapper /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# VAGrENT\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/VAGrENT/archive/v2.1.3.tar.gz && \\\n    mkdir /tmp/downloads/VAGrENT && \\\n    tar -C /tmp/downloads/VAGrENT --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/VAGrENT && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/VAGrENT /tmp/downloads/tmp.tar.gz /tmp/downloads/*.tmp.bioperl ~/.cpanm\n\n# grass\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/grass/archive/v1.1.6.tar.gz && \\\n    mkdir /tmp/downloads/grass && \\\n    tar -C /tmp/downloads/grass --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/grass && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/grass /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n\n# BRASS\n# blat first\nRUN curl -sSL -o $OPT/bin/blat --retry 10 http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/blat && \\\n    chmod ugo+x $OPT/bin/blat\n\n# pre-compiled exonerate\nRUN curl -sSL http://ftp.ebi.ac.uk/pub/software/vertebrategenomics/exonerate/exonerate-2.2.0-x86_64.tar.gz | \\\n    tar -C $OPT/bin --strip-components=2 -zx exonerate-2.2.0-x86_64/bin/exonerate && \\\n    chmod ugo+x $OPT/bin/exonerate\n\n# perl mod Graph installed at top of file due to being required in Bio/Brass.pm\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/BRASS/archive/v4.0.15.tar.gz && \\\n    mkdir /tmp/downloads/BRASS && \\\n    tar -C /tmp/downloads/BRASS --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/BRASS && \\\n    rm -rf cansam* && \\\n    unzip -q distros/cansam.zip && \\\n    mv cansam-master cansam && \\\n    make -C cansam && \\\n    make -C c++ && \\\n    cp c++/augment-bam $OPT/bin/. && \\\n    cp c++/brass-group $OPT/bin/. && \\\n    cp c++/filterout-bam $OPT/bin/. && \\\n    tar zxf distros/velvet_1.2.10.tgz && \\\n    cd velvet_1.2.10 && \\\n    make MAXKMERLENGTH=95 velveth velvetg && \\\n    mv velveth $OPT/bin/velvet95h && \\\n    mv velvetg $OPT/bin/velvet95g && \\\n    make  clean && \\\n    make velveth velvetg && \\\n    mv velveth $OPT/bin/velvet31h && \\\n    mv velvetg $OPT/bin/velvet31g && \\\n    ln -fs $OPT/bin/velvet95h $OPT/bin/velveth && \\\n    ln -fs $OPT/bin/velvet95g $OPT/bin/velvetg && \\\n    cd /tmp/downloads/BRASS && \\\n    cd /tmp/downloads/BRASS/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/BRASS /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# build the R bits\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://ftp.heanet.ie/mirrors/cran.r-project.org/src/base/R-3/R-3.1.3.tar.gz && \\\n    mkdir /tmp/downloads/R-build && \\\n    tar -C /tmp/downloads/R-build --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/R-build && \\\n    ./configure --with-cairo=yes --prefix=$OPT && \\\n    make && \\\n    make check && \\\n    make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/R-build /tmp/downloads/tmp.tar.gz\n\nRUN echo '(\".Rprofile: Setting UK repository\")\\n\\\nr = getOption(\"repos\") # hard code the UK repo for CRAN\\n\\\nr[\"CRAN\"] = \"http://cran.uk.r-project.org\"\\n\\\noptions(repos = r)\\n\\\nrm(r)\\n\\\nsource(\"http://bioconductor.org/biocLite.R\")\\n\\\nbiocLite(\"gam\", ask=FALSE)\\n\\\nbiocLite(\"VGAM\", ask=FALSE)\\n\\\nbiocLite(\"stringr\", ask=FALSE)\\n\\\nbiocLite(\"BiocGenerics\", ask=FALSE)\\n\\\nbiocLite(\"poweRlaw\", ask=FALSE)\\n\\\nbiocLite(\"S4Vectors\", ask=FALSE)\\n\\\nbiocLite(\"IRanges\", ask=FALSE)\\n\\\nbiocLite(\"GenomeInfoDb\", ask=FALSE)\\n\\\nbiocLite(\"zlibbioc\", ask=FALSE)\\n\\\nbiocLite(\"XVector\", ask=FALSE)\\n\\\nbiocLite(\"RColorBrewer\", ask=FALSE)\\n\\\nbiocLite(\"GenomicRanges\", ask=FALSE)\\n\\\nbiocLite(\"copynumber\", ask=FALSE)' > tmp.R && \\\n    Rscript tmp.R && \\\n    rm tmp.R\n\n# Add ssearch36 BRASS dep\nRUN   curl -sSL -o tmp.tar.gz --retry 10 https://github.com/wrpearson/fasta36/releases/download/v36.3.8/fasta-36.3.8-linux64.tar.gz && \\\n      mkdir  /tmp/downloads/fasta && \\\n      tar -C /tmp/downloads/fasta --strip-components 2 -zxf tmp.tar.gz && \\\n      cp /tmp/downloads/fasta/bin/ssearch36 $OPT/bin/. && \\\n      rm -rf /tmp/downloads/fasta\n\n### END of CGP INSTALL ###\n\nCOPY ./src\t\t\t\t\t  /home/seqware/CGP-Somatic-Docker/src\nCOPY ./workflow\t\t\t\t/home/seqware/CGP-Somatic-Docker/workflow\nCOPY ./scripts\t\t\t\t/home/seqware/CGP-Somatic-Docker/scripts\nCOPY ./pom.xml\t\t\t\t/home/seqware/CGP-Somatic-Docker/pom.xml\nCOPY ./workflow.properties\t/home/seqware/CGP-Somatic-Docker/workflow.properties\n\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py\n\n\nENV SEQWARE_ROOT=\"root\"\nWORKDIR /home/seqware/CGP-Somatic-Docker\n\nRUN echo \"options(bitmapType='cairo')\" > /home/seqware/.Rprofile && \\\n    sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\n# default entry will run test data\n#ENTRYPOINT /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\n\n# build the workflow which will prevent problems in the future if artifactory at OICR goes down\nRUN mvn -B clean install\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD /bin/bash\n"
                }
            }, 
            {
                "name": "develop", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-sanger-cgp-workflow/version/develop", 
                "image": "quay.io/pancancer/pcawg-sanger-cgp-workflow:develop", 
                "meta-version": "2016-04-08 00:16:12.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/develop/Dockstore.wdl", 
                    "descriptor": "task Seqware_Sanger_Somatic_Workflow {\n    File tumor\n    File normal\n    File refFrom\n    File bbFrom\n    String outputDir\n\n    command {\n        python /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py \\\n        --tumor ${tumor} \\\n        --normal ${normal} \\\n        --refFrom ${refFrom} \\\n        --bbFrom ${bbFrom}\n        --output-dir ${outputDir}\n    }\n\n    output {\n        Array[File] somatic_snv_mnv_tar_gz = glob('${outputDir}*.somatic.snv_mnv.tar.gz')\n        Array[File] somatic_cnv_tar_gz = glob('${outputDir}*.somatic.cnv.tar.gz')\n        Array[File] somatic_sv_tar_gz = glob('${outputDir}*.somatic.sv.tar.gz')\n        Array[File] somatic_indel_tar_gz = glob('${outputDir}*.somatic.indel.tar.gz')\n        Array[File] somatic_imputeCounts_tar_gz = glob('${outputDir}*.somatic.imputeCounts.tar.gz')\n        Array[File] somatic_genotype_tar_gz = glob('${outputDir}*.somatic.genotype.tar.gz')\n        Array[File] somatic_verifyBamId_tar_gz = glob('${outputDir}*.somatic.verifyBamId.tar.gz')\n    }\n\n    runtime {\n        docker: 'quay.io/TBD'\n    }\n}\n\nworkflow Seqware_Sanger_Somatic_Workflow {\n    call Seqware_Sanger_Somatic_Workflow\n}\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/develop/Dockerfile", 
                    "dockerfile": "FROM pancancer/seqware_whitestar_pancancer:1.1.2\n\nENV SANGER_VERSION 1.0.8\nLABEL SANGER_VERSION $SANGER_VERSION\n\nUSER root\n\n### START of CGP INSTALL ###\n\nENV OPT /opt/wtsi-cgp\nENV PATH $OPT/bin:$PATH\nENV PERL5LIB $OPT/lib/perl5:$PERL5LIB\n\nRUN apt-get -yqq update && \\\n    apt-get -yqq install libreadline6-dev build-essential autoconf software-properties-common python-software-properties \\\n      wget time curl zlib1g-dev libncurses5-dev \\\n      libgd2-xpm-dev libexpat1-dev python unzip libboost-dev libboost-iostreams-dev \\\n      libpstreams-dev libglib2.0-dev gfortran libcairo2-dev cpanminus libwww-perl \\\n      openjdk-7-jdk && \\\n    apt-get clean\n\nRUN mkdir -p /tmp/downloads $OPT/bin $OPT/etc $OPT/lib $OPT/share\nWORKDIR /tmp/downloads\n\nRUN cpanm --mirror http://cpan.metacpan.org -l $OPT File::ShareDir File::ShareDir::Install Bio::Root::Version Const::Fast Graph && \\\n     rm -rf ~/.cpanm\n\nRUN export SOURCE_JKENT_BIN=https://github.com/ENCODE-DCC/kentUtils/raw/master/bin/linux.x86_64 && \\\n    curl -sSL -o $OPT/bin/wigToBigWig -C - --retry 10 ${SOURCE_JKENT_BIN}/wigToBigWig && chmod +x $OPT/bin/wigToBigWig && \\\n    curl -sSL -o $OPT/bin/bigWigMerge -C - --retry 10 ${SOURCE_JKENT_BIN}/bigWigMerge && chmod +x $OPT/bin/bigWigMerge\n\n#BWA\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/lh3/bwa/archive/0.7.12.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    make  && \\\n    cp bwa $OPT/bin/. && \\\n    rm -rf *\n\n#BIOBAMBAM\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/gt1/biobambam2/releases/download/2.0.25-release-20151105154334/biobambam2-2.0.25-release-20151105154334-x86_64-etch-linux-gnu.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    rm -f bin/curl && \\\n    cp -r bin/* $OPT/bin/. && \\\n    cp -r etc/* $OPT/etc/. && \\\n    cp -r lib/* $OPT/lib/. && \\\n    cp -r share/* $OPT/share/. && \\\n    rm -rf *\n\n# htslib - used multiple times later\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/htslib/archive/1.2.1.tar.gz && \\\n    mkdir /tmp/downloads/htslib && \\\n    tar -C /tmp/downloads/htslib --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/htslib && \\\n    rm -f /tmp/downloads/tmp.tar.gz\n\nENV HTSLIB /tmp/downloads/htslib\n\n# legacy samtools\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/samtools/archive/0.1.20.tar.gz && \\\n    mkdir /tmp/downloads/samtools && \\\n    tar -C /tmp/downloads/samtools --strip-components 1 -zxf tmp.tar.gz && \\\n    perl -i -pe 's/^CFLAGS=\\s*/CFLAGS=-fPIC / unless /\\b-fPIC\\b/' samtools/Makefile && \\\n    make -C samtools && \\\n    cp samtools/samtools $OPT/bin/. && \\\n    export SAMTOOLS=/tmp/downloads/samtools && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT Bio::DB::Sam && \\\n    rm -rf /tmp/downloads/samtools /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# bam_stats + PCAP build\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/ICGC-TCGA-PanCancer/PCAP-core/archive/v1.13.1.tar.gz && \\\n    mkdir /tmp/downloads/PCAP && \\\n    tar -C /tmp/downloads/PCAP --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/PCAP/c && \\\n    cp /tmp/downloads/PCAP/bin/bam_stats $OPT/bin/. && \\\n    make -C /tmp/downloads/PCAP/c clean && \\\n    cd /tmp/downloads/PCAP && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/PCAP /tmp/downloads/tmp.tar.gz ~/.cpanm\n\nRUN curl -sSL -o tmp.zip --retry 10 https://github.com/samtools/tabix/archive/master.zip && \\\n    unzip -q tmp.zip && \\\n    cd /tmp/downloads/tabix-master && \\\n    make && \\\n    cp tabix $OPT/bin/. && \\\n    cp bgzip $OPT/bin/. && \\\n    cd perl && \\\n    perl Makefile.PL INSTALL_BASE=$INST_PATH && \\\n    make && make test && make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/tabix-master /tmp/downloads/tmp.zip\n\n# start of cgpVcf block\n# the commit UUID for the release of cgpVcf in use\n\nENV CGPVCF_UUID 5cc538ded838a4ba94feedff1b51ee3ebc4b65f4\n\n# build vcftools using patch from cgpVcf release\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://sourceforge.net/projects/vcftools/files/vcftools_0.1.12a.tar.gz/download && \\\n    mkdir /tmp/downloads/vcftools && \\\n    tar -C /tmp/downloads/vcftools --strip-components 1 -zxf /tmp/downloads/tmp.tar.gz && \\\n    cd /tmp/downloads/vcftools && \\\n    curl -sSL -o vcfToolsInstLocs.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsInstLocs.diff && \\\n    patch Makefile < vcfToolsInstLocs.diff && \\\n    curl -sSL -o vcfToolsProcessLog.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsProcessLog.diff && \\\n    patch perl/Vcf.pm < vcfToolsProcessLog.diff && \\\n    make  PREFIX=$OPT && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/vcftools /tmp/downloads/tmp.tar.gz\n\n# bedtools, make sure it is a suitable version without the input switch\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/arq5x/bedtools2/releases/download/v2.21.0/bedtools-2.21.0.tar.gz && \\\n    mkdir /tmp/downloads/bedtools2 && \\\n    tar -C /tmp/downloads/bedtools2 --strip-components 1 -zxf tmp.tar.gz && \\\n    make  -C /tmp/downloads/bedtools2 && \\\n    cp /tmp/downloads/bedtools2/bin/* $OPT/bin/. && \\\n    rm -rf /tmp/downloads/bedtools2 /tmp/downloads/tmp.tar.gz\n\n# cgpVcf\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpVcf/archive/v1.3.1.tar.gz && \\\n    mkdir /tmp/downloads/cgpVcf && \\\n    tar -C /tmp/downloads/cgpVcf --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpVcf && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpVcf /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# alleleCount - only want C version\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/alleleCount/archive/v2.1.2.tar.gz && \\\n    mkdir /tmp/downloads/alleleCount && \\\n    tar -C /tmp/downloads/alleleCount --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/alleleCount/c && \\\n    mkdir bin && \\\n    make && \\\n    cp /tmp/downloads/alleleCount/c/bin/alleleCounter $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/alleleCount /tmp/downloads/tmp.tar.gz\n\n# verifyBamId\nRUN curl -sSL -o $OPT/bin/verifyBamId --retry 10 https://github.com/statgen/verifyBamID/releases/download/v1.1.2/verifyBamID.1.1.2 && \\\n    chmod +x $OPT/bin/verifyBamId && \\\n    rm -f /tmp/downloads/verifyBamId\n\n# cgpNgsQc\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpNgsQc/archive/v1.1.0.tar.gz && \\\n    mkdir /tmp/downloads/cgpNgsQc && \\\n    tar -C /tmp/downloads/cgpNgsQc --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpNgsQc && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpNgsQc /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# ascatNgs\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/ascatNgs/archive/v1.7.1.tar.gz && \\\n    mkdir /tmp/downloads/ascatNgs && \\\n    tar -C /tmp/downloads/ascatNgs --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/ascatNgs/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/ascatNgs /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpPindel\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpPindel/archive/v1.5.5.tar.gz && \\\n    mkdir /tmp/downloads/cgpPindel && \\\n    tar -C /tmp/downloads/cgpPindel --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpPindel && \\\n    g++ -O3 -o $OPT/bin/pindel c++/pindel.cpp && \\\n    g++ -O3 -o $OPT/bin/filter_pindel_reads c++/filter_pindel_reads.cpp && \\\n    cd /tmp/downloads/cgpPindel/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpPindel /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpCaVEManPostProcessing\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManPostProcessing/archive/1.5.3.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManPostProcessing && \\\n    tar -C /tmp/downloads/cgpCaVEManPostProcessing --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManPostProcessing && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManPostProcessing /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# CaVEMan\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/CaVEMan/archive/1.9.1.tar.gz && \\\n    mkdir /tmp/downloads/CaVEMan && \\\n    tar -C /tmp/downloads/CaVEMan --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/CaVEMan && \\\n    make && \\\n    cp /tmp/downloads/CaVEMan/bin/caveman $OPT/bin/. && \\\n    cp /tmp/downloads/CaVEMan/bin/mergeCavemanResults $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/CaVEMan /tmp/downloads/tmp.tar.gz ~/.cpanm ~/.cache/hts-ref\n\n\n# cgpCaVEManWrapper\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManWrapper/archive/1.9.2.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManWrapper && \\\n    tar -C /tmp/downloads/cgpCaVEManWrapper --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManWrapper && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManWrapper /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# VAGrENT\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/VAGrENT/archive/v2.1.3.tar.gz && \\\n    mkdir /tmp/downloads/VAGrENT && \\\n    tar -C /tmp/downloads/VAGrENT --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/VAGrENT && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/VAGrENT /tmp/downloads/tmp.tar.gz /tmp/downloads/*.tmp.bioperl ~/.cpanm\n\n# grass\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/grass/archive/v1.1.6.tar.gz && \\\n    mkdir /tmp/downloads/grass && \\\n    tar -C /tmp/downloads/grass --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/grass && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/grass /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n\n# BRASS\n# blat first\nRUN curl -sSL -o $OPT/bin/blat --retry 10 http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/blat && \\\n    chmod ugo+x $OPT/bin/blat\n\n# pre-compiled exonerate\nRUN curl -sSL http://ftp.ebi.ac.uk/pub/software/vertebrategenomics/exonerate/exonerate-2.2.0-x86_64.tar.gz | \\\n    tar -C $OPT/bin --strip-components=2 -zx exonerate-2.2.0-x86_64/bin/exonerate && \\\n    chmod ugo+x $OPT/bin/exonerate\n\n# perl mod Graph installed at top of file due to being required in Bio/Brass.pm\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/BRASS/archive/v4.0.15.tar.gz && \\\n    mkdir /tmp/downloads/BRASS && \\\n    tar -C /tmp/downloads/BRASS --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/BRASS && \\\n    rm -rf cansam* && \\\n    unzip -q distros/cansam.zip && \\\n    mv cansam-master cansam && \\\n    make -C cansam && \\\n    make -C c++ && \\\n    cp c++/augment-bam $OPT/bin/. && \\\n    cp c++/brass-group $OPT/bin/. && \\\n    cp c++/filterout-bam $OPT/bin/. && \\\n    tar zxf distros/velvet_1.2.10.tgz && \\\n    cd velvet_1.2.10 && \\\n    make MAXKMERLENGTH=95 velveth velvetg && \\\n    mv velveth $OPT/bin/velvet95h && \\\n    mv velvetg $OPT/bin/velvet95g && \\\n    make  clean && \\\n    make velveth velvetg && \\\n    mv velveth $OPT/bin/velvet31h && \\\n    mv velvetg $OPT/bin/velvet31g && \\\n    ln -fs $OPT/bin/velvet95h $OPT/bin/velveth && \\\n    ln -fs $OPT/bin/velvet95g $OPT/bin/velvetg && \\\n    cd /tmp/downloads/BRASS && \\\n    cd /tmp/downloads/BRASS/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/BRASS /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# build the R bits\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://ftp.heanet.ie/mirrors/cran.r-project.org/src/base/R-3/R-3.1.3.tar.gz && \\\n    mkdir /tmp/downloads/R-build && \\\n    tar -C /tmp/downloads/R-build --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/R-build && \\\n    ./configure --with-cairo=yes --prefix=$OPT && \\\n    make && \\\n    make check && \\\n    make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/R-build /tmp/downloads/tmp.tar.gz\n\nRUN echo '(\".Rprofile: Setting UK repository\")\\n\\\nr = getOption(\"repos\") # hard code the UK repo for CRAN\\n\\\nr[\"CRAN\"] = \"http://cran.uk.r-project.org\"\\n\\\noptions(repos = r)\\n\\\nrm(r)\\n\\\nsource(\"http://bioconductor.org/biocLite.R\")\\n\\\nbiocLite(\"gam\", ask=FALSE)\\n\\\nbiocLite(\"VGAM\", ask=FALSE)\\n\\\nbiocLite(\"stringr\", ask=FALSE)\\n\\\nbiocLite(\"BiocGenerics\", ask=FALSE)\\n\\\nbiocLite(\"poweRlaw\", ask=FALSE)\\n\\\nbiocLite(\"S4Vectors\", ask=FALSE)\\n\\\nbiocLite(\"IRanges\", ask=FALSE)\\n\\\nbiocLite(\"GenomeInfoDb\", ask=FALSE)\\n\\\nbiocLite(\"zlibbioc\", ask=FALSE)\\n\\\nbiocLite(\"XVector\", ask=FALSE)\\n\\\nbiocLite(\"RColorBrewer\", ask=FALSE)\\n\\\nbiocLite(\"GenomicRanges\", ask=FALSE)\\n\\\nbiocLite(\"copynumber\", ask=FALSE)' > tmp.R && \\\n    Rscript tmp.R && \\\n    rm tmp.R\n\n# Add ssearch36 BRASS dep\nRUN   curl -sSL -o tmp.tar.gz --retry 10 https://github.com/wrpearson/fasta36/releases/download/v36.3.8/fasta-36.3.8-linux64.tar.gz && \\\n      mkdir  /tmp/downloads/fasta && \\\n      tar -C /tmp/downloads/fasta --strip-components 2 -zxf tmp.tar.gz && \\\n      cp /tmp/downloads/fasta/bin/ssearch36 $OPT/bin/. && \\\n      rm -rf /tmp/downloads/fasta\n\n### END of CGP INSTALL ###\n\nCOPY ./src\t\t\t\t\t  /home/seqware/CGP-Somatic-Docker/src\nCOPY ./workflow\t\t\t\t/home/seqware/CGP-Somatic-Docker/workflow\nCOPY ./scripts\t\t\t\t/home/seqware/CGP-Somatic-Docker/scripts\nCOPY ./pom.xml\t\t\t\t/home/seqware/CGP-Somatic-Docker/pom.xml\nCOPY ./workflow.properties\t/home/seqware/CGP-Somatic-Docker/workflow.properties\n\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py\n\n\nENV SEQWARE_ROOT=\"root\"\nWORKDIR /home/seqware/CGP-Somatic-Docker\n\nRUN echo \"options(bitmapType='cairo')\" > /home/seqware/.Rprofile && \\\n    sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\n# default entry will run test data\n#ENTRYPOINT /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\n\n# build the workflow which will prevent problems in the future if artifactory at OICR goes down\nRUN mvn -B clean install\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD /bin/bash\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-sanger-cgp-workflow/version/latest", 
                "image": "quay.io/pancancer/pcawg-sanger-cgp-workflow:latest", 
                "meta-version": "2016-04-08 00:16:19.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/develop/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-Sanger-Somatic-Workflow\"\nlabel: \"Seqware-Sanger-Somatic-Workflow\"\n\ndescription: |\n    The Sanger's Cancer Genome Project core somatic calling workflow from \n    the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker).\n    ```\n    Usage:\n    # fetch CWL\n    $> dockstore cwl --entry quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore launch --entry quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0 \\\n        --json Dockstore.json\n    ```\n\ndct:creator:\n  \"@id\": \"http://sanger.ac.uk/...\"\n  foaf:name: \"Keiran Raine\"\n  foaf:mbox: \"mailto:keiranmraine@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0\n\ninputs:\n  - id: \"#tumor\"\n    type: File\n    inputBinding:\n      position: 1\n      prefix: \"--tumor\"\n    secondaryFiles:\n      - .bai \n\n  - id: \"#normal\"\n    type: File\n    inputBinding:\n      position: 2\n      prefix: \"--normal\"\n    secondaryFiles:\n      - .bai \n\n  - id: \"#refFrom\"\n    type: File\n    inputBinding:\n      position: 3\n      prefix: \"--refFrom\"\n\n  - id: \"#bbFrom\"\n    type: File\n    inputBinding:\n      position: 4\n      prefix: \"--bbFrom\"\n\noutputs:\n  - id: \"#somatic_snv_mnv_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.snv_mnv.tar.gz\"\n  - id: \"#somatic_cnv_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.cnv.tar.gz\"\n  - id: \"#somatic_sv_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.sv.tar.gz\"\n  - id: \"#somatic_indel_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.indel.tar.gz\"\n  - id: \"#somatic_imputeCounts_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.imputeCounts.tar.gz\"\n  - id: \"#somatic_genotype_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.genotype.tar.gz\"\n  - id: \"#somatic_verifyBamId_tar_gz\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.verifyBamId.tar.gz\"\n\nbaseCommand: [\"python\", \"/home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/develop/Dockerfile", 
                    "dockerfile": "FROM pancancer/seqware_whitestar_pancancer:1.1.2\n\nENV SANGER_VERSION 1.0.8\nLABEL SANGER_VERSION $SANGER_VERSION\n\nUSER root\n\n### START of CGP INSTALL ###\n\nENV OPT /opt/wtsi-cgp\nENV PATH $OPT/bin:$PATH\nENV PERL5LIB $OPT/lib/perl5:$PERL5LIB\n\nRUN apt-get -yqq update && \\\n    apt-get -yqq install libreadline6-dev build-essential autoconf software-properties-common python-software-properties \\\n      wget time curl zlib1g-dev libncurses5-dev \\\n      libgd2-xpm-dev libexpat1-dev python unzip libboost-dev libboost-iostreams-dev \\\n      libpstreams-dev libglib2.0-dev gfortran libcairo2-dev cpanminus libwww-perl \\\n      openjdk-7-jdk && \\\n    apt-get clean\n\nRUN mkdir -p /tmp/downloads $OPT/bin $OPT/etc $OPT/lib $OPT/share\nWORKDIR /tmp/downloads\n\nRUN cpanm --mirror http://cpan.metacpan.org -l $OPT File::ShareDir File::ShareDir::Install Bio::Root::Version Const::Fast Graph && \\\n     rm -rf ~/.cpanm\n\nRUN export SOURCE_JKENT_BIN=https://github.com/ENCODE-DCC/kentUtils/raw/master/bin/linux.x86_64 && \\\n    curl -sSL -o $OPT/bin/wigToBigWig -C - --retry 10 ${SOURCE_JKENT_BIN}/wigToBigWig && chmod +x $OPT/bin/wigToBigWig && \\\n    curl -sSL -o $OPT/bin/bigWigMerge -C - --retry 10 ${SOURCE_JKENT_BIN}/bigWigMerge && chmod +x $OPT/bin/bigWigMerge\n\n#BWA\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/lh3/bwa/archive/0.7.12.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    make  && \\\n    cp bwa $OPT/bin/. && \\\n    rm -rf *\n\n#BIOBAMBAM\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/gt1/biobambam2/releases/download/2.0.25-release-20151105154334/biobambam2-2.0.25-release-20151105154334-x86_64-etch-linux-gnu.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    rm -f bin/curl && \\\n    cp -r bin/* $OPT/bin/. && \\\n    cp -r etc/* $OPT/etc/. && \\\n    cp -r lib/* $OPT/lib/. && \\\n    cp -r share/* $OPT/share/. && \\\n    rm -rf *\n\n# htslib - used multiple times later\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/htslib/archive/1.2.1.tar.gz && \\\n    mkdir /tmp/downloads/htslib && \\\n    tar -C /tmp/downloads/htslib --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/htslib && \\\n    rm -f /tmp/downloads/tmp.tar.gz\n\nENV HTSLIB /tmp/downloads/htslib\n\n# legacy samtools\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/samtools/archive/0.1.20.tar.gz && \\\n    mkdir /tmp/downloads/samtools && \\\n    tar -C /tmp/downloads/samtools --strip-components 1 -zxf tmp.tar.gz && \\\n    perl -i -pe 's/^CFLAGS=\\s*/CFLAGS=-fPIC / unless /\\b-fPIC\\b/' samtools/Makefile && \\\n    make -C samtools && \\\n    cp samtools/samtools $OPT/bin/. && \\\n    export SAMTOOLS=/tmp/downloads/samtools && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT Bio::DB::Sam && \\\n    rm -rf /tmp/downloads/samtools /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# bam_stats + PCAP build\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/ICGC-TCGA-PanCancer/PCAP-core/archive/v1.13.1.tar.gz && \\\n    mkdir /tmp/downloads/PCAP && \\\n    tar -C /tmp/downloads/PCAP --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/PCAP/c && \\\n    cp /tmp/downloads/PCAP/bin/bam_stats $OPT/bin/. && \\\n    make -C /tmp/downloads/PCAP/c clean && \\\n    cd /tmp/downloads/PCAP && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/PCAP /tmp/downloads/tmp.tar.gz ~/.cpanm\n\nRUN curl -sSL -o tmp.zip --retry 10 https://github.com/samtools/tabix/archive/master.zip && \\\n    unzip -q tmp.zip && \\\n    cd /tmp/downloads/tabix-master && \\\n    make && \\\n    cp tabix $OPT/bin/. && \\\n    cp bgzip $OPT/bin/. && \\\n    cd perl && \\\n    perl Makefile.PL INSTALL_BASE=$INST_PATH && \\\n    make && make test && make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/tabix-master /tmp/downloads/tmp.zip\n\n# start of cgpVcf block\n# the commit UUID for the release of cgpVcf in use\n\nENV CGPVCF_UUID 5cc538ded838a4ba94feedff1b51ee3ebc4b65f4\n\n# build vcftools using patch from cgpVcf release\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://sourceforge.net/projects/vcftools/files/vcftools_0.1.12a.tar.gz/download && \\\n    mkdir /tmp/downloads/vcftools && \\\n    tar -C /tmp/downloads/vcftools --strip-components 1 -zxf /tmp/downloads/tmp.tar.gz && \\\n    cd /tmp/downloads/vcftools && \\\n    curl -sSL -o vcfToolsInstLocs.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsInstLocs.diff && \\\n    patch Makefile < vcfToolsInstLocs.diff && \\\n    curl -sSL -o vcfToolsProcessLog.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsProcessLog.diff && \\\n    patch perl/Vcf.pm < vcfToolsProcessLog.diff && \\\n    make  PREFIX=$OPT && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/vcftools /tmp/downloads/tmp.tar.gz\n\n# bedtools, make sure it is a suitable version without the input switch\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/arq5x/bedtools2/releases/download/v2.21.0/bedtools-2.21.0.tar.gz && \\\n    mkdir /tmp/downloads/bedtools2 && \\\n    tar -C /tmp/downloads/bedtools2 --strip-components 1 -zxf tmp.tar.gz && \\\n    make  -C /tmp/downloads/bedtools2 && \\\n    cp /tmp/downloads/bedtools2/bin/* $OPT/bin/. && \\\n    rm -rf /tmp/downloads/bedtools2 /tmp/downloads/tmp.tar.gz\n\n# cgpVcf\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpVcf/archive/v1.3.1.tar.gz && \\\n    mkdir /tmp/downloads/cgpVcf && \\\n    tar -C /tmp/downloads/cgpVcf --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpVcf && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpVcf /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# alleleCount - only want C version\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/alleleCount/archive/v2.1.2.tar.gz && \\\n    mkdir /tmp/downloads/alleleCount && \\\n    tar -C /tmp/downloads/alleleCount --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/alleleCount/c && \\\n    mkdir bin && \\\n    make && \\\n    cp /tmp/downloads/alleleCount/c/bin/alleleCounter $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/alleleCount /tmp/downloads/tmp.tar.gz\n\n# verifyBamId\nRUN curl -sSL -o $OPT/bin/verifyBamId --retry 10 https://github.com/statgen/verifyBamID/releases/download/v1.1.2/verifyBamID.1.1.2 && \\\n    chmod +x $OPT/bin/verifyBamId && \\\n    rm -f /tmp/downloads/verifyBamId\n\n# cgpNgsQc\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpNgsQc/archive/v1.1.0.tar.gz && \\\n    mkdir /tmp/downloads/cgpNgsQc && \\\n    tar -C /tmp/downloads/cgpNgsQc --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpNgsQc && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpNgsQc /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# ascatNgs\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/ascatNgs/archive/v1.7.1.tar.gz && \\\n    mkdir /tmp/downloads/ascatNgs && \\\n    tar -C /tmp/downloads/ascatNgs --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/ascatNgs/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/ascatNgs /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpPindel\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpPindel/archive/v1.5.5.tar.gz && \\\n    mkdir /tmp/downloads/cgpPindel && \\\n    tar -C /tmp/downloads/cgpPindel --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpPindel && \\\n    g++ -O3 -o $OPT/bin/pindel c++/pindel.cpp && \\\n    g++ -O3 -o $OPT/bin/filter_pindel_reads c++/filter_pindel_reads.cpp && \\\n    cd /tmp/downloads/cgpPindel/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpPindel /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpCaVEManPostProcessing\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManPostProcessing/archive/1.5.3.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManPostProcessing && \\\n    tar -C /tmp/downloads/cgpCaVEManPostProcessing --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManPostProcessing && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManPostProcessing /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# CaVEMan\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/CaVEMan/archive/1.9.1.tar.gz && \\\n    mkdir /tmp/downloads/CaVEMan && \\\n    tar -C /tmp/downloads/CaVEMan --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/CaVEMan && \\\n    make && \\\n    cp /tmp/downloads/CaVEMan/bin/caveman $OPT/bin/. && \\\n    cp /tmp/downloads/CaVEMan/bin/mergeCavemanResults $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/CaVEMan /tmp/downloads/tmp.tar.gz ~/.cpanm ~/.cache/hts-ref\n\n\n# cgpCaVEManWrapper\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManWrapper/archive/1.9.2.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManWrapper && \\\n    tar -C /tmp/downloads/cgpCaVEManWrapper --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManWrapper && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManWrapper /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# VAGrENT\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/VAGrENT/archive/v2.1.3.tar.gz && \\\n    mkdir /tmp/downloads/VAGrENT && \\\n    tar -C /tmp/downloads/VAGrENT --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/VAGrENT && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/VAGrENT /tmp/downloads/tmp.tar.gz /tmp/downloads/*.tmp.bioperl ~/.cpanm\n\n# grass\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/grass/archive/v1.1.6.tar.gz && \\\n    mkdir /tmp/downloads/grass && \\\n    tar -C /tmp/downloads/grass --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/grass && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/grass /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n\n# BRASS\n# blat first\nRUN curl -sSL -o $OPT/bin/blat --retry 10 http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/blat && \\\n    chmod ugo+x $OPT/bin/blat\n\n# pre-compiled exonerate\nRUN curl -sSL http://ftp.ebi.ac.uk/pub/software/vertebrategenomics/exonerate/exonerate-2.2.0-x86_64.tar.gz | \\\n    tar -C $OPT/bin --strip-components=2 -zx exonerate-2.2.0-x86_64/bin/exonerate && \\\n    chmod ugo+x $OPT/bin/exonerate\n\n# perl mod Graph installed at top of file due to being required in Bio/Brass.pm\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/BRASS/archive/v4.0.15.tar.gz && \\\n    mkdir /tmp/downloads/BRASS && \\\n    tar -C /tmp/downloads/BRASS --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/BRASS && \\\n    rm -rf cansam* && \\\n    unzip -q distros/cansam.zip && \\\n    mv cansam-master cansam && \\\n    make -C cansam && \\\n    make -C c++ && \\\n    cp c++/augment-bam $OPT/bin/. && \\\n    cp c++/brass-group $OPT/bin/. && \\\n    cp c++/filterout-bam $OPT/bin/. && \\\n    tar zxf distros/velvet_1.2.10.tgz && \\\n    cd velvet_1.2.10 && \\\n    make MAXKMERLENGTH=95 velveth velvetg && \\\n    mv velveth $OPT/bin/velvet95h && \\\n    mv velvetg $OPT/bin/velvet95g && \\\n    make  clean && \\\n    make velveth velvetg && \\\n    mv velveth $OPT/bin/velvet31h && \\\n    mv velvetg $OPT/bin/velvet31g && \\\n    ln -fs $OPT/bin/velvet95h $OPT/bin/velveth && \\\n    ln -fs $OPT/bin/velvet95g $OPT/bin/velvetg && \\\n    cd /tmp/downloads/BRASS && \\\n    cd /tmp/downloads/BRASS/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/BRASS /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# build the R bits\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://ftp.heanet.ie/mirrors/cran.r-project.org/src/base/R-3/R-3.1.3.tar.gz && \\\n    mkdir /tmp/downloads/R-build && \\\n    tar -C /tmp/downloads/R-build --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/R-build && \\\n    ./configure --with-cairo=yes --prefix=$OPT && \\\n    make && \\\n    make check && \\\n    make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/R-build /tmp/downloads/tmp.tar.gz\n\nRUN echo '(\".Rprofile: Setting UK repository\")\\n\\\nr = getOption(\"repos\") # hard code the UK repo for CRAN\\n\\\nr[\"CRAN\"] = \"http://cran.uk.r-project.org\"\\n\\\noptions(repos = r)\\n\\\nrm(r)\\n\\\nsource(\"http://bioconductor.org/biocLite.R\")\\n\\\nbiocLite(\"gam\", ask=FALSE)\\n\\\nbiocLite(\"VGAM\", ask=FALSE)\\n\\\nbiocLite(\"stringr\", ask=FALSE)\\n\\\nbiocLite(\"BiocGenerics\", ask=FALSE)\\n\\\nbiocLite(\"poweRlaw\", ask=FALSE)\\n\\\nbiocLite(\"S4Vectors\", ask=FALSE)\\n\\\nbiocLite(\"IRanges\", ask=FALSE)\\n\\\nbiocLite(\"GenomeInfoDb\", ask=FALSE)\\n\\\nbiocLite(\"zlibbioc\", ask=FALSE)\\n\\\nbiocLite(\"XVector\", ask=FALSE)\\n\\\nbiocLite(\"RColorBrewer\", ask=FALSE)\\n\\\nbiocLite(\"GenomicRanges\", ask=FALSE)\\n\\\nbiocLite(\"copynumber\", ask=FALSE)' > tmp.R && \\\n    Rscript tmp.R && \\\n    rm tmp.R\n\n# Add ssearch36 BRASS dep\nRUN   curl -sSL -o tmp.tar.gz --retry 10 https://github.com/wrpearson/fasta36/releases/download/v36.3.8/fasta-36.3.8-linux64.tar.gz && \\\n      mkdir  /tmp/downloads/fasta && \\\n      tar -C /tmp/downloads/fasta --strip-components 2 -zxf tmp.tar.gz && \\\n      cp /tmp/downloads/fasta/bin/ssearch36 $OPT/bin/. && \\\n      rm -rf /tmp/downloads/fasta\n\n### END of CGP INSTALL ###\n\nCOPY ./src\t\t\t\t\t  /home/seqware/CGP-Somatic-Docker/src\nCOPY ./workflow\t\t\t\t/home/seqware/CGP-Somatic-Docker/workflow\nCOPY ./scripts\t\t\t\t/home/seqware/CGP-Somatic-Docker/scripts\nCOPY ./pom.xml\t\t\t\t/home/seqware/CGP-Somatic-Docker/pom.xml\nCOPY ./workflow.properties\t/home/seqware/CGP-Somatic-Docker/workflow.properties\n\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py\n\n\nENV SEQWARE_ROOT=\"root\"\nWORKDIR /home/seqware/CGP-Somatic-Docker\n\nRUN echo \"options(bitmapType='cairo')\" > /home/seqware/.Rprofile && \\\n    sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\n# default entry will run test data\n#ENTRYPOINT /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\n\n# build the workflow which will prevent problems in the future if artifactory at OICR goes down\nRUN mvn -B clean install\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD /bin/bash\n"
                }
            }, 
            {
                "name": "2.0.0", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-sanger-cgp-workflow/version/2.0.0", 
                "image": "quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0", 
                "meta-version": "2016-04-07 14:54:49.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/2.0.0/Dockstore.wdl", 
                    "descriptor": "task Seqware_Sanger_Somatic_Workflow {\n    File tumor\n    File normal\n    File refFrom\n    File bbFrom\n    String outputDir\n\n    command {\n        python /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py \\\n        --tumor ${tumor} \\\n        --normal ${normal} \\\n        --refFrom ${refFrom} \\\n        --bbFrom ${bbFrom}\n        --output-dir ${outputDir}\n    }\n\n    output {\n        Array[File] somatic_snv_mnv_tar_gz = glob('${outputDir}*.somatic.snv_mnv.tar.gz')\n        Array[File] somatic_cnv_tar_gz = glob('${outputDir}*.somatic.cnv.tar.gz')\n        Array[File] somatic_sv_tar_gz = glob('${outputDir}*.somatic.sv.tar.gz')\n        Array[File] somatic_indel_tar_gz = glob('${outputDir}*.somatic.indel.tar.gz')\n        Array[File] somatic_imputeCounts_tar_gz = glob('${outputDir}*.somatic.imputeCounts.tar.gz')\n        Array[File] somatic_genotype_tar_gz = glob('${outputDir}*.somatic.genotype.tar.gz')\n        Array[File] somatic_verifyBamId_tar_gz = glob('${outputDir}*.somatic.verifyBamId.tar.gz')\n    }\n\n    runtime {\n        docker: 'quay.io/TBD'\n    }\n}\n\nworkflow Seqware_Sanger_Somatic_Workflow {\n    call Seqware_Sanger_Somatic_Workflow\n}\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker/2.0.0/Dockerfile", 
                    "dockerfile": "FROM pancancer/seqware_whitestar_pancancer:1.1.2\n\nENV SANGER_VERSION 1.0.8\nLABEL SANGER_VERSION $SANGER_VERSION\n\nUSER root\n\n### START of CGP INSTALL ###\n\nENV OPT /opt/wtsi-cgp\nENV PATH $OPT/bin:$PATH\nENV PERL5LIB $OPT/lib/perl5:$PERL5LIB\n\nRUN apt-get -yqq update && \\\n    apt-get -yqq install libreadline6-dev build-essential autoconf software-properties-common python-software-properties \\\n      wget time curl zlib1g-dev libncurses5-dev \\\n      libgd2-xpm-dev libexpat1-dev python unzip libboost-dev libboost-iostreams-dev \\\n      libpstreams-dev libglib2.0-dev gfortran libcairo2-dev cpanminus libwww-perl \\\n      openjdk-7-jdk && \\\n    apt-get clean\n\nRUN mkdir -p /tmp/downloads $OPT/bin $OPT/etc $OPT/lib $OPT/share\nWORKDIR /tmp/downloads\n\nRUN cpanm --mirror http://cpan.metacpan.org -l $OPT File::ShareDir File::ShareDir::Install Bio::Root::Version Const::Fast Graph && \\\n     rm -rf ~/.cpanm\n\nRUN export SOURCE_JKENT_BIN=https://github.com/ENCODE-DCC/kentUtils/raw/master/bin/linux.x86_64 && \\\n    curl -sSL -o $OPT/bin/wigToBigWig -C - --retry 10 ${SOURCE_JKENT_BIN}/wigToBigWig && chmod +x $OPT/bin/wigToBigWig && \\\n    curl -sSL -o $OPT/bin/bigWigMerge -C - --retry 10 ${SOURCE_JKENT_BIN}/bigWigMerge && chmod +x $OPT/bin/bigWigMerge\n\n#BWA\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/lh3/bwa/archive/0.7.12.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    make  && \\\n    cp bwa $OPT/bin/. && \\\n    rm -rf *\n\n#BIOBAMBAM\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/gt1/biobambam2/releases/download/2.0.25-release-20151105154334/biobambam2-2.0.25-release-20151105154334-x86_64-etch-linux-gnu.tar.gz && \\\n    tar --strip-components 1 -zxf tmp.tar.gz && \\\n    rm -f bin/curl && \\\n    cp -r bin/* $OPT/bin/. && \\\n    cp -r etc/* $OPT/etc/. && \\\n    cp -r lib/* $OPT/lib/. && \\\n    cp -r share/* $OPT/share/. && \\\n    rm -rf *\n\n# htslib - used multiple times later\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/htslib/archive/1.2.1.tar.gz && \\\n    mkdir /tmp/downloads/htslib && \\\n    tar -C /tmp/downloads/htslib --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/htslib && \\\n    rm -f /tmp/downloads/tmp.tar.gz\n\nENV HTSLIB /tmp/downloads/htslib\n\n# legacy samtools\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/samtools/samtools/archive/0.1.20.tar.gz && \\\n    mkdir /tmp/downloads/samtools && \\\n    tar -C /tmp/downloads/samtools --strip-components 1 -zxf tmp.tar.gz && \\\n    perl -i -pe 's/^CFLAGS=\\s*/CFLAGS=-fPIC / unless /\\b-fPIC\\b/' samtools/Makefile && \\\n    make -C samtools && \\\n    cp samtools/samtools $OPT/bin/. && \\\n    export SAMTOOLS=/tmp/downloads/samtools && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT Bio::DB::Sam && \\\n    rm -rf /tmp/downloads/samtools /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# bam_stats + PCAP build\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/ICGC-TCGA-PanCancer/PCAP-core/archive/v1.13.1.tar.gz && \\\n    mkdir /tmp/downloads/PCAP && \\\n    tar -C /tmp/downloads/PCAP --strip-components 1 -zxf tmp.tar.gz && \\\n    make -C /tmp/downloads/PCAP/c && \\\n    cp /tmp/downloads/PCAP/bin/bam_stats $OPT/bin/. && \\\n    make -C /tmp/downloads/PCAP/c clean && \\\n    cd /tmp/downloads/PCAP && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/PCAP /tmp/downloads/tmp.tar.gz ~/.cpanm\n\nRUN curl -sSL -o tmp.zip --retry 10 https://github.com/samtools/tabix/archive/master.zip && \\\n    unzip -q tmp.zip && \\\n    cd /tmp/downloads/tabix-master && \\\n    make && \\\n    cp tabix $OPT/bin/. && \\\n    cp bgzip $OPT/bin/. && \\\n    cd perl && \\\n    perl Makefile.PL INSTALL_BASE=$INST_PATH && \\\n    make && make test && make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/tabix-master /tmp/downloads/tmp.zip\n\n# start of cgpVcf block\n# the commit UUID for the release of cgpVcf in use\n\nENV CGPVCF_UUID 5cc538ded838a4ba94feedff1b51ee3ebc4b65f4\n\n# build vcftools using patch from cgpVcf release\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://sourceforge.net/projects/vcftools/files/vcftools_0.1.12a.tar.gz/download && \\\n    mkdir /tmp/downloads/vcftools && \\\n    tar -C /tmp/downloads/vcftools --strip-components 1 -zxf /tmp/downloads/tmp.tar.gz && \\\n    cd /tmp/downloads/vcftools && \\\n    curl -sSL -o vcfToolsInstLocs.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsInstLocs.diff && \\\n    patch Makefile < vcfToolsInstLocs.diff && \\\n    curl -sSL -o vcfToolsProcessLog.diff --retry 10 https://raw.githubusercontent.com/cancerit/cgpVcf/$CGPVCF_UUID/patches/vcfToolsProcessLog.diff && \\\n    patch perl/Vcf.pm < vcfToolsProcessLog.diff && \\\n    make  PREFIX=$OPT && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/vcftools /tmp/downloads/tmp.tar.gz\n\n# bedtools, make sure it is a suitable version without the input switch\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/arq5x/bedtools2/releases/download/v2.21.0/bedtools-2.21.0.tar.gz && \\\n    mkdir /tmp/downloads/bedtools2 && \\\n    tar -C /tmp/downloads/bedtools2 --strip-components 1 -zxf tmp.tar.gz && \\\n    make  -C /tmp/downloads/bedtools2 && \\\n    cp /tmp/downloads/bedtools2/bin/* $OPT/bin/. && \\\n    rm -rf /tmp/downloads/bedtools2 /tmp/downloads/tmp.tar.gz\n\n# cgpVcf\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpVcf/archive/v1.3.1.tar.gz && \\\n    mkdir /tmp/downloads/cgpVcf && \\\n    tar -C /tmp/downloads/cgpVcf --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpVcf && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpVcf /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# alleleCount - only want C version\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/alleleCount/archive/v2.1.2.tar.gz && \\\n    mkdir /tmp/downloads/alleleCount && \\\n    tar -C /tmp/downloads/alleleCount --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/alleleCount/c && \\\n    mkdir bin && \\\n    make && \\\n    cp /tmp/downloads/alleleCount/c/bin/alleleCounter $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/alleleCount /tmp/downloads/tmp.tar.gz\n\n# verifyBamId\nRUN curl -sSL -o $OPT/bin/verifyBamId --retry 10 https://github.com/statgen/verifyBamID/releases/download/v1.1.2/verifyBamID.1.1.2 && \\\n    chmod +x $OPT/bin/verifyBamId && \\\n    rm -f /tmp/downloads/verifyBamId\n\n# cgpNgsQc\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpNgsQc/archive/v1.1.0.tar.gz && \\\n    mkdir /tmp/downloads/cgpNgsQc && \\\n    tar -C /tmp/downloads/cgpNgsQc --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpNgsQc && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpNgsQc /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# ascatNgs\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/ascatNgs/archive/v1.7.1.tar.gz && \\\n    mkdir /tmp/downloads/ascatNgs && \\\n    tar -C /tmp/downloads/ascatNgs --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/ascatNgs/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/ascatNgs /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpPindel\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpPindel/archive/v1.5.5.tar.gz && \\\n    mkdir /tmp/downloads/cgpPindel && \\\n    tar -C /tmp/downloads/cgpPindel --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpPindel && \\\n    g++ -O3 -o $OPT/bin/pindel c++/pindel.cpp && \\\n    g++ -O3 -o $OPT/bin/filter_pindel_reads c++/filter_pindel_reads.cpp && \\\n    cd /tmp/downloads/cgpPindel/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpPindel /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# cgpCaVEManPostProcessing\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManPostProcessing/archive/1.5.3.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManPostProcessing && \\\n    tar -C /tmp/downloads/cgpCaVEManPostProcessing --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManPostProcessing && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManPostProcessing /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# CaVEMan\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/CaVEMan/archive/1.9.1.tar.gz && \\\n    mkdir /tmp/downloads/CaVEMan && \\\n    tar -C /tmp/downloads/CaVEMan --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/CaVEMan && \\\n    make && \\\n    cp /tmp/downloads/CaVEMan/bin/caveman $OPT/bin/. && \\\n    cp /tmp/downloads/CaVEMan/bin/mergeCavemanResults $OPT/bin/. && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/CaVEMan /tmp/downloads/tmp.tar.gz ~/.cpanm ~/.cache/hts-ref\n\n\n# cgpCaVEManWrapper\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/cgpCaVEManWrapper/archive/1.9.2.tar.gz && \\\n    mkdir /tmp/downloads/cgpCaVEManWrapper && \\\n    tar -C /tmp/downloads/cgpCaVEManWrapper --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/cgpCaVEManWrapper && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/cgpCaVEManWrapper /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# VAGrENT\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/VAGrENT/archive/v2.1.3.tar.gz && \\\n    mkdir /tmp/downloads/VAGrENT && \\\n    tar -C /tmp/downloads/VAGrENT --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/VAGrENT && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/VAGrENT /tmp/downloads/tmp.tar.gz /tmp/downloads/*.tmp.bioperl ~/.cpanm\n\n# grass\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/grass/archive/v1.1.6.tar.gz && \\\n    mkdir /tmp/downloads/grass && \\\n    tar -C /tmp/downloads/grass --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/grass && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . &&\\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/grass /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n\n# BRASS\n# blat first\nRUN curl -sSL -o $OPT/bin/blat --retry 10 http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/blat && \\\n    chmod ugo+x $OPT/bin/blat\n\n# pre-compiled exonerate\nRUN curl -sSL http://ftp.ebi.ac.uk/pub/software/vertebrategenomics/exonerate/exonerate-2.2.0-x86_64.tar.gz | \\\n    tar -C $OPT/bin --strip-components=2 -zx exonerate-2.2.0-x86_64/bin/exonerate && \\\n    chmod ugo+x $OPT/bin/exonerate\n\n# perl mod Graph installed at top of file due to being required in Bio/Brass.pm\nRUN curl -sSL -o tmp.tar.gz --retry 10 https://github.com/cancerit/BRASS/archive/v4.0.15.tar.gz && \\\n    mkdir /tmp/downloads/BRASS && \\\n    tar -C /tmp/downloads/BRASS --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/BRASS && \\\n    rm -rf cansam* && \\\n    unzip -q distros/cansam.zip && \\\n    mv cansam-master cansam && \\\n    make -C cansam && \\\n    make -C c++ && \\\n    cp c++/augment-bam $OPT/bin/. && \\\n    cp c++/brass-group $OPT/bin/. && \\\n    cp c++/filterout-bam $OPT/bin/. && \\\n    tar zxf distros/velvet_1.2.10.tgz && \\\n    cd velvet_1.2.10 && \\\n    make MAXKMERLENGTH=95 velveth velvetg && \\\n    mv velveth $OPT/bin/velvet95h && \\\n    mv velvetg $OPT/bin/velvet95g && \\\n    make  clean && \\\n    make velveth velvetg && \\\n    mv velveth $OPT/bin/velvet31h && \\\n    mv velvetg $OPT/bin/velvet31g && \\\n    ln -fs $OPT/bin/velvet95h $OPT/bin/velveth && \\\n    ln -fs $OPT/bin/velvet95g $OPT/bin/velvetg && \\\n    cd /tmp/downloads/BRASS && \\\n    cd /tmp/downloads/BRASS/perl && \\\n    cpanm --mirror http://cpan.metacpan.org -l $OPT . && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/BRASS /tmp/downloads/tmp.tar.gz ~/.cpanm\n\n# build the R bits\nRUN curl -sSL -o tmp.tar.gz --retry 10 http://ftp.heanet.ie/mirrors/cran.r-project.org/src/base/R-3/R-3.1.3.tar.gz && \\\n    mkdir /tmp/downloads/R-build && \\\n    tar -C /tmp/downloads/R-build --strip-components 1 -zxf tmp.tar.gz && \\\n    cd /tmp/downloads/R-build && \\\n    ./configure --with-cairo=yes --prefix=$OPT && \\\n    make && \\\n    make check && \\\n    make install && \\\n    cd /tmp/downloads && \\\n    rm -rf /tmp/downloads/R-build /tmp/downloads/tmp.tar.gz\n\nRUN echo '(\".Rprofile: Setting UK repository\")\\n\\\nr = getOption(\"repos\") # hard code the UK repo for CRAN\\n\\\nr[\"CRAN\"] = \"http://cran.uk.r-project.org\"\\n\\\noptions(repos = r)\\n\\\nrm(r)\\n\\\nsource(\"http://bioconductor.org/biocLite.R\")\\n\\\nbiocLite(\"gam\", ask=FALSE)\\n\\\nbiocLite(\"VGAM\", ask=FALSE)\\n\\\nbiocLite(\"stringr\", ask=FALSE)\\n\\\nbiocLite(\"BiocGenerics\", ask=FALSE)\\n\\\nbiocLite(\"poweRlaw\", ask=FALSE)\\n\\\nbiocLite(\"S4Vectors\", ask=FALSE)\\n\\\nbiocLite(\"IRanges\", ask=FALSE)\\n\\\nbiocLite(\"GenomeInfoDb\", ask=FALSE)\\n\\\nbiocLite(\"zlibbioc\", ask=FALSE)\\n\\\nbiocLite(\"XVector\", ask=FALSE)\\n\\\nbiocLite(\"RColorBrewer\", ask=FALSE)\\n\\\nbiocLite(\"GenomicRanges\", ask=FALSE)\\n\\\nbiocLite(\"copynumber\", ask=FALSE)' > tmp.R && \\\n    Rscript tmp.R && \\\n    rm tmp.R\n\n# Add ssearch36 BRASS dep\nRUN   curl -sSL -o tmp.tar.gz --retry 10 https://github.com/wrpearson/fasta36/releases/download/v36.3.8/fasta-36.3.8-linux64.tar.gz && \\\n      mkdir  /tmp/downloads/fasta && \\\n      tar -C /tmp/downloads/fasta --strip-components 2 -zxf tmp.tar.gz && \\\n      cp /tmp/downloads/fasta/bin/ssearch36 $OPT/bin/. && \\\n      rm -rf /tmp/downloads/fasta\n\n### END of CGP INSTALL ###\n\nCOPY ./src\t\t\t\t\t  /home/seqware/CGP-Somatic-Docker/src\nCOPY ./workflow\t\t\t\t/home/seqware/CGP-Somatic-Docker/workflow\nCOPY ./scripts\t\t\t\t/home/seqware/CGP-Somatic-Docker/scripts\nCOPY ./pom.xml\t\t\t\t/home/seqware/CGP-Somatic-Docker/pom.xml\nCOPY ./workflow.properties\t/home/seqware/CGP-Somatic-Docker/workflow.properties\n\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\nRUN chmod a+x /home/seqware/CGP-Somatic-Docker/scripts/run_seqware_workflow.py\n\n\nENV SEQWARE_ROOT=\"root\"\nWORKDIR /home/seqware/CGP-Somatic-Docker\n\nRUN echo \"options(bitmapType='cairo')\" > /home/seqware/.Rprofile && \\\n    sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\n# default entry will run test data\n#ENTRYPOINT /home/seqware/CGP-Somatic-Docker/scripts/run_sanger.sh\n\n# build the workflow which will prevent problems in the future if artifactory at OICR goes down\nRUN mvn -B clean install\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD /bin/bash\n"
                }
            }
        ], 
        "name": "pcawg-sanger-cgp-workflow", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Keiran Raine", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-sanger-cgp-workflow", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "pancancer", 
        "registry-id": "quay.io/pancancer/pcawg-sanger-cgp-workflow", 
        "description": "The Sanger's Cancer Genome Project core somatic calling workflow from \nthe ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\nFor more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n[page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n[this workflow](https://github.com/ICGC-TCGA-PanCancer/CGP-Somatic-Docker).\n```\nUsage:\n# fetch CWL\n$> dockstore cwl --entry quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0 > Dockstore.cwl\n# make a runtime JSON template and edit it\n$> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n# run it locally with the Dockstore CLI\n$> dockstore launch --entry quay.io/pancancer/pcawg-sanger-cgp-workflow:2.0.0 \\\n    --json Dockstore.json\n```"
    }, 
    {
        "versions": [
            {
                "name": "2.6.8", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow/version/2.6.8", 
                "image": "quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8", 
                "meta-version": "2016-04-07 11:46:44.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/2.6.8/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-BWA-Workflow\"\nlabel: \"Seqware-BWA-Workflow\"\n\ndescription: |\n    The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n    ```\n    Usage:\n    # fetch CWL\n    $> dockstore cwl --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore launch --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 \\\n        --json Dockstore.json\n    ```\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8\n\ninputs:\n  - id: \"#reads\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 1\n      prefix: \"--file\"\n\n  - id: \"#reference_gz\"\n    type: File\n    description: 'the reference *.fa.gz file'\n    inputBinding:\n      position: 2\n      prefix: \"--reference-gz\"\n\n  - id: \"#reference_gz_fai\"\n    type: File\n    description: 'the reference *.fa.gz.fai file'\n    inputBinding:\n      position: 3\n      prefix: \"--reference-gz-fai\"\n\n  - id: \"#reference_gz_amb\"\n    type: File\n    description: 'the reference *.fa.gz.amb file'\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz-amb\"\n\n  - id: \"#reference_gz_ann\"\n    type: File\n    description: 'the reference *.fa.gz.ann file'\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gz-ann\"\n\n  - id: \"#reference_gz_bwt\"\n    type: File\n    description: 'the reference *.fa.gz.bwt file'\n    inputBinding:\n      position: 6\n      prefix: \"--reference-gz-bwt\"\n\n  - id: \"#reference_gz_pac\"\n    type: File\n    description: 'the reference *.fa.gz.pac file'\n    inputBinding:\n      position: 7\n      prefix: \"--reference-gz-pac\"\n\n  - id: \"#reference_gz_sa\"\n    type: File\n    description: 'the reference *.fa.gz.sa file'\n    inputBinding:\n      position: 8\n      prefix: \"--reference-gz-sa\"\n\noutputs:\n  - id: \"#merged_output_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam\"\n  - id: \"#merged_output_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam.bai\"\n  - id: \"#merged_output_unmapped_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam\"\n  - id: \"#merged_output_unmapped_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam.bai\"\n\nbaseCommand: [\"perl\", \"/home/seqware/Seqware-BWA-Workflow/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/2.6.8/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build BWA-Mem workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to the SeqWare PanCancer image\nFROM pancancer/seqware_whitestar_pancancer:1.1.2\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\nUSER root\nRUN apt-get -m update\n\nRUN apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time tabix\n\nCOPY src /home/seqware/Seqware-BWA-Workflow/src\nCOPY workflow /home/seqware/Seqware-BWA-Workflow/workflow\nCOPY pom.xml /home/seqware/Seqware-BWA-Workflow/\nCOPY workflow.properties /home/seqware/Seqware-BWA-Workflow/\nCOPY scripts/run_seqware_workflow.pl /home/seqware/Seqware-BWA-Workflow/\nRUN chown -R seqware /home/seqware/Seqware-BWA-Workflow\nUSER seqware\nWORKDIR /home/seqware/Seqware-BWA-Workflow/\nRUN mvn -B clean install\n# designate directories that need to read-write to allow seqware to function \nVOLUME [\"/datastore\"]\nVOLUME [\"/tmp\"]\nVOLUME [\"/home/seqware\"]\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "2.6.7", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow/version/2.6.7", 
                "image": "quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.7", 
                "meta-version": "2016-04-07 08:59:20.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/2.6.7/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-BWA-Workflow\"\nlabel: \"Seqware-BWA-Workflow\"\n\ndescription: |\n    The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n    ```\n    Usage: workflow-pcawg-bwa-alignment --file unaligned_bam [--file unaligned_bam]\n    ```\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/collaboratory/seqware-bwa-workflow:2.6.7\n\ninputs:\n  - id: \"#reads\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 1\n      prefix: \"--file\"\n\n  - id: \"#reference_gz\"\n    type: File\n    description: 'the reference *.fa.gz file'\n    inputBinding:\n      position: 2\n      prefix: \"--reference-gz\"\n\n  - id: \"#reference_gz_fai\"\n    type: File\n    description: 'the reference *.fa.gz.fai file'\n    inputBinding:\n      position: 3\n      prefix: \"--reference-gz-fai\"\n\n  - id: \"#reference_gz_amb\"\n    type: File\n    description: 'the reference *.fa.gz.amb file'\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz-amb\"\n\n  - id: \"#reference_gz_ann\"\n    type: File\n    description: 'the reference *.fa.gz.ann file'\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gz-ann\"\n\n  - id: \"#reference_gz_bwt\"\n    type: File\n    description: 'the reference *.fa.gz.bwt file'\n    inputBinding:\n      position: 6\n      prefix: \"--reference-gz-bwt\"\n\n  - id: \"#reference_gz_pac\"\n    type: File\n    description: 'the reference *.fa.gz.pac file'\n    inputBinding:\n      position: 7\n      prefix: \"--reference-gz-pac\"\n\n  - id: \"#reference_gz_sa\"\n    type: File\n    description: 'the reference *.fa.gz.sa file'\n    inputBinding:\n      position: 8\n      prefix: \"--reference-gz-sa\"\n\noutputs:\n  - id: \"#merged_output_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam\"\n  - id: \"#merged_output_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam.bai\"\n  - id: \"#merged_output_unmapped_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam\"\n  - id: \"#merged_output_unmapped_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam.bai\"\n\nbaseCommand: [\"perl\", \"/home/seqware/Seqware-BWA-Workflow/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/2.6.7/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build BWA-Mem workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to the SeqWare PanCancer image\nFROM pancancer/seqware_whitestar_pancancer:1.1.2\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\nUSER root\nRUN apt-get -m update\n\nRUN apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time tabix\n\nCOPY src /home/seqware/Seqware-BWA-Workflow/src\nCOPY workflow /home/seqware/Seqware-BWA-Workflow/workflow\nCOPY pom.xml /home/seqware/Seqware-BWA-Workflow/\nCOPY workflow.properties /home/seqware/Seqware-BWA-Workflow/\nCOPY scripts/run_seqware_workflow.pl /home/seqware/Seqware-BWA-Workflow/\nRUN chown -R seqware /home/seqware/Seqware-BWA-Workflow\nUSER seqware\nWORKDIR /home/seqware/Seqware-BWA-Workflow/\nRUN mvn -B clean install\n# designate directories that need to read-write to allow seqware to function \nVOLUME [\"/datastore\"]\nVOLUME [\"/tmp\"]\nVOLUME [\"/home/seqware\"]\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "develop", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow/version/develop", 
                "image": "quay.io/pancancer/pcawg-bwa-mem-workflow:develop", 
                "meta-version": "2016-04-07 11:23:25.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/develop/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-BWA-Workflow\"\nlabel: \"Seqware-BWA-Workflow\"\n\ndescription: |\n    The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n    ```\n    Usage:\n    # fetch CWL\n    $> dockstore cwl --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore launch --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 \\\n        --json Dockstore.json\n    ```\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8\n\ninputs:\n  - id: \"#reads\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 1\n      prefix: \"--file\"\n\n  - id: \"#reference_gz\"\n    type: File\n    description: 'the reference *.fa.gz file'\n    inputBinding:\n      position: 2\n      prefix: \"--reference-gz\"\n\n  - id: \"#reference_gz_fai\"\n    type: File\n    description: 'the reference *.fa.gz.fai file'\n    inputBinding:\n      position: 3\n      prefix: \"--reference-gz-fai\"\n\n  - id: \"#reference_gz_amb\"\n    type: File\n    description: 'the reference *.fa.gz.amb file'\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz-amb\"\n\n  - id: \"#reference_gz_ann\"\n    type: File\n    description: 'the reference *.fa.gz.ann file'\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gz-ann\"\n\n  - id: \"#reference_gz_bwt\"\n    type: File\n    description: 'the reference *.fa.gz.bwt file'\n    inputBinding:\n      position: 6\n      prefix: \"--reference-gz-bwt\"\n\n  - id: \"#reference_gz_pac\"\n    type: File\n    description: 'the reference *.fa.gz.pac file'\n    inputBinding:\n      position: 7\n      prefix: \"--reference-gz-pac\"\n\n  - id: \"#reference_gz_sa\"\n    type: File\n    description: 'the reference *.fa.gz.sa file'\n    inputBinding:\n      position: 8\n      prefix: \"--reference-gz-sa\"\n\noutputs:\n  - id: \"#merged_output_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam\"\n  - id: \"#merged_output_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam.bai\"\n  - id: \"#merged_output_unmapped_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam\"\n  - id: \"#merged_output_unmapped_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam.bai\"\n\nbaseCommand: [\"perl\", \"/home/seqware/Seqware-BWA-Workflow/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/develop/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build BWA-Mem workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to the SeqWare PanCancer image\nFROM pancancer/seqware_whitestar_pancancer:1.1.2\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\nUSER root\nRUN apt-get -m update\n\nRUN apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time tabix\n\nCOPY src /home/seqware/Seqware-BWA-Workflow/src\nCOPY workflow /home/seqware/Seqware-BWA-Workflow/workflow\nCOPY pom.xml /home/seqware/Seqware-BWA-Workflow/\nCOPY workflow.properties /home/seqware/Seqware-BWA-Workflow/\nCOPY scripts/run_seqware_workflow.pl /home/seqware/Seqware-BWA-Workflow/\nRUN chown -R seqware /home/seqware/Seqware-BWA-Workflow\nUSER seqware\nWORKDIR /home/seqware/Seqware-BWA-Workflow/\nRUN mvn -B clean install\n# designate directories that need to read-write to allow seqware to function \nVOLUME [\"/datastore\"]\nVOLUME [\"/tmp\"]\nVOLUME [\"/home/seqware\"]\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow/version/latest", 
                "image": "quay.io/pancancer/pcawg-bwa-mem-workflow:latest", 
                "meta-version": "2016-04-07 11:23:28.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/develop/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-BWA-Workflow\"\nlabel: \"Seqware-BWA-Workflow\"\n\ndescription: |\n    The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n    ```\n    Usage:\n    # fetch CWL\n    $> dockstore cwl --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore launch --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 \\\n        --json Dockstore.json\n    ```\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8\n\ninputs:\n  - id: \"#reads\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 1\n      prefix: \"--file\"\n\n  - id: \"#reference_gz\"\n    type: File\n    description: 'the reference *.fa.gz file'\n    inputBinding:\n      position: 2\n      prefix: \"--reference-gz\"\n\n  - id: \"#reference_gz_fai\"\n    type: File\n    description: 'the reference *.fa.gz.fai file'\n    inputBinding:\n      position: 3\n      prefix: \"--reference-gz-fai\"\n\n  - id: \"#reference_gz_amb\"\n    type: File\n    description: 'the reference *.fa.gz.amb file'\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz-amb\"\n\n  - id: \"#reference_gz_ann\"\n    type: File\n    description: 'the reference *.fa.gz.ann file'\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gz-ann\"\n\n  - id: \"#reference_gz_bwt\"\n    type: File\n    description: 'the reference *.fa.gz.bwt file'\n    inputBinding:\n      position: 6\n      prefix: \"--reference-gz-bwt\"\n\n  - id: \"#reference_gz_pac\"\n    type: File\n    description: 'the reference *.fa.gz.pac file'\n    inputBinding:\n      position: 7\n      prefix: \"--reference-gz-pac\"\n\n  - id: \"#reference_gz_sa\"\n    type: File\n    description: 'the reference *.fa.gz.sa file'\n    inputBinding:\n      position: 8\n      prefix: \"--reference-gz-sa\"\n\noutputs:\n  - id: \"#merged_output_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam\"\n  - id: \"#merged_output_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam.bai\"\n  - id: \"#merged_output_unmapped_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam\"\n  - id: \"#merged_output_unmapped_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam.bai\"\n\nbaseCommand: [\"perl\", \"/home/seqware/Seqware-BWA-Workflow/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/develop/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build BWA-Mem workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to the SeqWare PanCancer image\nFROM pancancer/seqware_whitestar_pancancer:1.1.2\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\nUSER root\nRUN apt-get -m update\n\nRUN apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time tabix\n\nCOPY src /home/seqware/Seqware-BWA-Workflow/src\nCOPY workflow /home/seqware/Seqware-BWA-Workflow/workflow\nCOPY pom.xml /home/seqware/Seqware-BWA-Workflow/\nCOPY workflow.properties /home/seqware/Seqware-BWA-Workflow/\nCOPY scripts/run_seqware_workflow.pl /home/seqware/Seqware-BWA-Workflow/\nRUN chown -R seqware /home/seqware/Seqware-BWA-Workflow\nUSER seqware\nWORKDIR /home/seqware/Seqware-BWA-Workflow/\nRUN mvn -B clean install\n# designate directories that need to read-write to allow seqware to function \nVOLUME [\"/datastore\"]\nVOLUME [\"/tmp\"]\nVOLUME [\"/home/seqware\"]\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow/version/master", 
                "image": "quay.io/pancancer/pcawg-bwa-mem-workflow:master", 
                "meta-version": "2016-04-07 11:42:48.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/master/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-BWA-Workflow\"\nlabel: \"Seqware-BWA-Workflow\"\n\ndescription: |\n    The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\n    For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n    ```\n    Usage:\n    # fetch CWL\n    $> dockstore cwl --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore launch --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 \\\n        --json Dockstore.json\n    ```\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8\n\ninputs:\n  - id: \"#reads\"\n    type:\n      type: array\n      items: File\n    inputBinding:\n      position: 1\n      prefix: \"--file\"\n\n  - id: \"#reference_gz\"\n    type: File\n    description: 'the reference *.fa.gz file'\n    inputBinding:\n      position: 2\n      prefix: \"--reference-gz\"\n\n  - id: \"#reference_gz_fai\"\n    type: File\n    description: 'the reference *.fa.gz.fai file'\n    inputBinding:\n      position: 3\n      prefix: \"--reference-gz-fai\"\n\n  - id: \"#reference_gz_amb\"\n    type: File\n    description: 'the reference *.fa.gz.amb file'\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz-amb\"\n\n  - id: \"#reference_gz_ann\"\n    type: File\n    description: 'the reference *.fa.gz.ann file'\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gz-ann\"\n\n  - id: \"#reference_gz_bwt\"\n    type: File\n    description: 'the reference *.fa.gz.bwt file'\n    inputBinding:\n      position: 6\n      prefix: \"--reference-gz-bwt\"\n\n  - id: \"#reference_gz_pac\"\n    type: File\n    description: 'the reference *.fa.gz.pac file'\n    inputBinding:\n      position: 7\n      prefix: \"--reference-gz-pac\"\n\n  - id: \"#reference_gz_sa\"\n    type: File\n    description: 'the reference *.fa.gz.sa file'\n    inputBinding:\n      position: 8\n      prefix: \"--reference-gz-sa\"\n\noutputs:\n  - id: \"#merged_output_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam\"\n  - id: \"#merged_output_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.bam.bai\"\n  - id: \"#merged_output_unmapped_bam\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam\"\n  - id: \"#merged_output_unmapped_bai\"\n    type: File\n    outputBinding:\n      glob: \"merged_output.unmapped.bam.bai\"\n\nbaseCommand: [\"perl\", \"/home/seqware/Seqware-BWA-Workflow/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow/master/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build BWA-Mem workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to the SeqWare PanCancer image\nFROM pancancer/seqware_whitestar_pancancer:1.1.2\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\nUSER root\nRUN apt-get -m update\n\nRUN apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time tabix\n\nCOPY src /home/seqware/Seqware-BWA-Workflow/src\nCOPY workflow /home/seqware/Seqware-BWA-Workflow/workflow\nCOPY pom.xml /home/seqware/Seqware-BWA-Workflow/\nCOPY workflow.properties /home/seqware/Seqware-BWA-Workflow/\nCOPY scripts/run_seqware_workflow.pl /home/seqware/Seqware-BWA-Workflow/\nRUN chown -R seqware /home/seqware/Seqware-BWA-Workflow\nUSER seqware\nWORKDIR /home/seqware/Seqware-BWA-Workflow/\nRUN mvn -B clean install\n# designate directories that need to read-write to allow seqware to function \nVOLUME [\"/datastore\"]\nVOLUME [\"/tmp\"]\nVOLUME [\"/home/seqware\"]\n\nCMD [\"/bin/bash\"]\n"
                }
            }
        ], 
        "name": "pcawg-bwa-mem-workflow", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Brian O'Connor", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg-bwa-mem-workflow", 
        "contains": [], 
        "meta-version": "2016-05-17 15:37:10.29", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "pancancer", 
        "registry-id": "quay.io/pancancer/pcawg-bwa-mem-workflow", 
        "description": "The BWA-Mem workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project.\nFor more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n[page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n[this workflow](https://github.com/ICGC-TCGA-PanCancer/Seqware-BWA-Workflow).\n```\nUsage:\n# fetch CWL\n$> dockstore cwl --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 > Dockstore.cwl\n# make a runtime JSON template and edit it\n$> dockstore convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n# run it locally with the Dockstore CLI\n$> dockstore launch --entry quay.io/pancancer/pcawg-bwa-mem-workflow:2.6.8 \\\n    --json Dockstore.json\n```"
    }, 
    {
        "versions": [
            {
                "name": "1.4", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/1.4", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:1.4", 
                "meta-version": "2015-08-26 15:28:29.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "develop", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/develop", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:develop", 
                "meta-version": "2016-05-21 01:40:39.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "1.1", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/1.1", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:1.1", 
                "meta-version": "2015-06-02 20:48:44.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "1.2", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/1.2", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:1.2", 
                "meta-version": "2015-07-07 16:26:40.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "2.0.0", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/2.0.0", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:2.0.0", 
                "meta-version": "2016-05-21 02:03:25.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/delly_docker/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-Delly-Workflow\"\nlabel: \"Seqware-Delly-Workflow\"\n\ndescription: |\n    ![pcawg logo](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/img/PCAWG-final-small.png \"pcawg logo\")\n\n    **PCAWG DELLY Workflow**\n\n    The DELLY workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project. For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow).\n\n    *Usage:*\n\n    ```\n    # fetch CWL\n    $> dockstore tool cwl --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore tool convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore tool launch --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 \\\n        --json Dockstore.json\n    ```\n    Also see this sample [Dockstore.json](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/delly_docker/Dockstore.json) with public URLs for sample data.\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg_delly_workflow:2.0.0\n\ninputs:\n  - id: \"#run-id\"\n    type: string\n    inputBinding:\n      position: 1\n      prefix: \"--run-id\"\n  - id: \"#normal-bam\"\n    type: File\n    inputBinding:\n      position: 2\n      prefix: \"--normal-bam\"\n  - id: \"#tumor-bam\"\n    type: File\n    inputBinding:\n      position: 3\n      prefix: \"--tumor-bam\"\n  - id: \"#reference-gz\"\n    type: File\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz\"\n  - id: \"#reference-gc\"\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gc\"\n\noutputs:\n  - id: \"#somatic_sv_vcf\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.sv.vcf.gz\"\n  - id: \"#somatic_bedpe\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.sv.bedpe.txt\"\n  - id: \"#cov\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.cov.tar.gz\"\n  - id: \"#cov_plots\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.cov.plots.tar.gz\"\n  - id: \"#germline_sv_vcf\"\n    type: File\n    outputBinding:\n      glob: \"*.germline.sv.vcf.gz\"\n  - id: \"#germline_bedpe\"\n    type: File\n    outputBinding:\n      glob: \"*.germline.sv.bedpe.txt\"\n  - id: \"#sv_log\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.log.tar.gz\"\n  - id: \"#sv_timing\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.timing.json\"\n  - id: \"#sv_qc\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.qc.json\"\n\nbaseCommand: [\"perl\", \"/usr/bin/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/delly_docker/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build DELLY workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to Ubuntu\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Ivica Letunic <letunic@biobyte.de>\n\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time python python-dev python-distribute python-pip r-base r-base-dev tabix cython sudo\nRUN pip install --upgrade pip && hash -r\nRUN pip install pybedtools numpy docopt PyVCF wheel pandas\nRUN wget https://github.com/samtools/samtools/releases/download/1.2/samtools-1.2.tar.bz2 -O - |tar -xj -C /tmp/ && cd /tmp/samtools-1.2 && make && make install\n#RUN echo \"source(\\\"http://bioconductor.org/biocLite.R\\\")\" > /tmp/dnacopy; echo \"biocLite()\" >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\nCOPY scripts/* /usr/bin/\nRUN for i in cleanup.sh cov cov_plot.pl cov_v0.5.6_linux_x86_64bit cov_v0.5.6_parallel_linux_x86_64bit delly delly_pcawg_qc_json.py delly_pcawg_timing_json.py delly_pe_dump.sh delly_prepare_uploader.sh DellySomaticFreqFilter.py delly_v0.6.3_parallel_linux_x86_64bit delly_v0.6.6_parallel_linux_x86_64bit dellyVcf2Tsv.py vcfcombine vcf_index.sh vcf-sort; do chmod a+rx /usr/bin/$i; done;\nRUN echo 'install.packages(\"/usr/bin/DNAcopy_1.38.1.tar.gz\")' >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\n\n# copy over the workflow src contents\nCOPY DELLY /home/seqware/DELLY\nRUN chown -R seqware /home/seqware/DELLY\nUSER seqware\nWORKDIR /home/seqware/DELLY/\n\n# add godaddy cert bridge\n# see http://drcs.ca/blog/adding-godaddy-intermediate-certificates-to-java-jdk/ and\n# http://tozny.com/blog/godaddys-ssl-certs-dont-work-in-java-the-right-solution/ for more information on this\nRUN wget https://certs.godaddy.com/repository/gdroot-g2_cross.crt && \\\n    keytool -import -alias cross -file gdroot-g2_cross.crt -trustcacerts -keystore /usr/lib/jvm/java-7-oracle-cloudera/jre/lib/security/cacerts  -storepass changeit\n\n# build the workflow\nRUN mvn -B clean install\n\n# configure for no retries and memory for SeqWare whitestar\nRUN sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "1.3", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/1.3", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:1.3", 
                "meta-version": "2015-07-23 19:05:43.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "brian_fixes_for_multitumour", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/brian_fixes_for_multitumour", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:brian_fixes_for_multitumour", 
                "meta-version": "2015-08-26 12:04:48.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "master", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/master", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:master", 
                "meta-version": "2016-05-21 01:59:26.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/master/delly_docker/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\nid: \"Seqware-Delly-Workflow\"\nlabel: \"Seqware-Delly-Workflow\"\n\ndescription: |\n    ![pcawg logo](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/img/PCAWG-final-small.png \"pcawg logo\")\n\n    **PCAWG DELLY Workflow**\n\n    The DELLY workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project. For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n    [page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n    [this workflow](https://github.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow).\n\n    *Usage:*\n\n    ```\n    # fetch CWL\n    $> dockstore tool cwl --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 > Dockstore.cwl\n    # make a runtime JSON template and edit it\n    $> dockstore tool convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n    # run it locally with the Dockstore CLI\n    $> dockstore tool launch --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 \\\n        --json Dockstore.json\n    ```\n    Also see this sample [Dockstore.json](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/delly_docker/Dockstore.json) with public URLs for sample data.\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: \"Brian O'Connor\"\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: ExpressionEngineRequirement\n    id: \"#node-engine\"\n    requirements:\n    - class: DockerRequirement\n      dockerPull: commonworkflowlanguage/nodejs-engine\n    engineCommand: cwlNodeEngine.js\n  - class: DockerRequirement\n    dockerPull: quay.io/pancancer/pcawg_delly_workflow:2.0.0\n\ninputs:\n  - id: \"#run-id\"\n    type: string\n    inputBinding:\n      position: 1\n      prefix: \"--run-id\"\n  - id: \"#normal-bam\"\n    type: File\n    inputBinding:\n      position: 2\n      prefix: \"--normal-bam\"\n  - id: \"#tumor-bam\"\n    type: File\n    inputBinding:\n      position: 3\n      prefix: \"--tumor-bam\"\n  - id: \"#reference-gz\"\n    type: File\n    inputBinding:\n      position: 4\n      prefix: \"--reference-gz\"\n  - id: \"#reference-gc\"\n    type: File\n    inputBinding:\n      position: 5\n      prefix: \"--reference-gc\"\n\noutputs:\n  - id: \"#somatic_sv_vcf\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.sv.vcf.gz\"\n  - id: \"#somatic_bedpe\"\n    type: File\n    outputBinding:\n      glob: \"*.somatic.sv.bedpe.txt\"\n  - id: \"#cov\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.cov.tar.gz\"\n  - id: \"#cov_plots\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.cov.plots.tar.gz\"\n  - id: \"#germline_sv_vcf\"\n    type: File\n    outputBinding:\n      glob: \"*.germline.sv.vcf.gz\"\n  - id: \"#germline_bedpe\"\n    type: File\n    outputBinding:\n      glob: \"*.germline.sv.bedpe.txt\"\n  - id: \"#sv_log\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.log.tar.gz\"\n  - id: \"#sv_timing\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.timing.json\"\n  - id: \"#sv_qc\"\n    type: File\n    outputBinding:\n      glob: \"*.sv.qc.json\"\n\nbaseCommand: [\"perl\", \"/usr/bin/run_seqware_workflow.pl\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/master/delly_docker/Dockerfile", 
                    "dockerfile": "############################################################\n# Dockerfile to build DELLY workflow container\n# Based on Ubuntu\n############################################################\n\n# Set the base image to Ubuntu\nFROM seqware/seqware_whitestar:1.1.1\n\n# File Author / Maintainer\nMAINTAINER Ivica Letunic <letunic@biobyte.de>\n\nUSER root\nRUN apt-get -m update && apt-get install -y apt-utils tar git curl nano wget dialog net-tools build-essential time python python-dev python-distribute python-pip r-base r-base-dev tabix cython sudo\nRUN pip install --upgrade pip && hash -r\nRUN pip install pybedtools numpy docopt PyVCF wheel pandas\nRUN wget https://github.com/samtools/samtools/releases/download/1.2/samtools-1.2.tar.bz2 -O - |tar -xj -C /tmp/ && cd /tmp/samtools-1.2 && make && make install\n#RUN echo \"source(\\\"http://bioconductor.org/biocLite.R\\\")\" > /tmp/dnacopy; echo \"biocLite()\" >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\nCOPY scripts/* /usr/bin/\nRUN for i in cleanup.sh cov cov_plot.pl cov_v0.5.6_linux_x86_64bit cov_v0.5.6_parallel_linux_x86_64bit delly delly_pcawg_qc_json.py delly_pcawg_timing_json.py delly_pe_dump.sh delly_prepare_uploader.sh DellySomaticFreqFilter.py delly_v0.6.3_parallel_linux_x86_64bit delly_v0.6.6_parallel_linux_x86_64bit dellyVcf2Tsv.py vcfcombine vcf_index.sh vcf-sort; do chmod a+rx /usr/bin/$i; done;\nRUN echo 'install.packages(\"/usr/bin/DNAcopy_1.38.1.tar.gz\")' >> /tmp/dnacopy; R CMD BATCH /tmp/dnacopy\n\n# copy over the workflow src contents\nCOPY DELLY /home/seqware/DELLY\nRUN chown -R seqware /home/seqware/DELLY\nUSER seqware\nWORKDIR /home/seqware/DELLY/\n\n# add godaddy cert bridge\n# see http://drcs.ca/blog/adding-godaddy-intermediate-certificates-to-java-jdk/ and\n# http://tozny.com/blog/godaddys-ssl-certs-dont-work-in-java-the-right-solution/ for more information on this\nRUN wget https://certs.godaddy.com/repository/gdroot-g2_cross.crt && \\\n    keytool -import -alias cross -file gdroot-g2_cross.crt -trustcacerts -keystore /usr/lib/jvm/java-7-oracle-cloudera/jre/lib/security/cacerts  -storepass changeit\n\n# build the workflow\nRUN mvn -B clean install\n\n# configure for no retries and memory for SeqWare whitestar\nRUN sed -i 's|OOZIE_RETRY_MAX=.*|OOZIE_RETRY_MAX=0|' /home/seqware/.seqware/settings && \\\n    echo 'WHITESTAR_MEMORY_LIMIT=160000' >> /home/seqware/.seqware/settings\n\nVOLUME /output\nVOLUME /datastore\nVOLUME /home/seqware\n\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "brian_race_condition_fix", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/brian_race_condition_fix", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:brian_race_condition_fix", 
                "meta-version": "2015-09-02 17:11:52.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }, 
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow/version/latest", 
                "image": "quay.io/pancancer/pcawg_delly_workflow:latest", 
                "meta-version": "2016-05-21 01:40:43.0", 
                "descriptor": null, 
                "registry-id": null, 
                "dockerfile": null
            }
        ], 
        "name": "pcawg_delly_workflow", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Brian O'Connor", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fpancancer%252Fpcawg_delly_workflow", 
        "contains": [], 
        "meta-version": "2016-05-21 02:54:39.591", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "pancancer", 
        "registry-id": "quay.io/pancancer/pcawg_delly_workflow", 
        "description": "![pcawg logo](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/img/PCAWG-final-small.png \"pcawg logo\")\n\n**PCAWG DELLY Workflow**\n\nThe DELLY workflow from the ICGC PanCancer Analysis of Whole Genomes (PCAWG) project. For more information see the PCAWG project [page](https://dcc.icgc.org/pcawg) and our GitHub\n[page](https://github.com/ICGC-TCGA-PanCancer) for our code including the source for\n[this workflow](https://github.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow).\n\n*Usage:*\n\n```\n# fetch CWL\n$> dockstore tool cwl --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 > Dockstore.cwl\n# make a runtime JSON template and edit it\n$> dockstore tool convert cwl2json --cwl Dockstore.cwl > Dockstore.json\n# run it locally with the Dockstore CLI\n$> dockstore tool launch --entry quay.io/pancancer/pcawg_delly_workflow:2.0.0 \\\n    --json Dockstore.json\n```\nAlso see this sample [Dockstore.json](https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/2.0.0/delly_docker/Dockstore.json) with public URLs for sample data."
    }, 
    {
        "versions": [
            {
                "name": "docker-2.0", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fmr_c%252Fkhmer/version/docker-2.0", 
                "image": "quay.io/mr_c/khmer:docker-2.0", 
                "meta-version": "2015-12-18 16:00:11.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/mr-c/khmer/docker-2.0/Dockstore.cwl", 
                    "descriptor": null
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/mr-c/khmer/docker-2.0/docker/Dockerfile", 
                    "dockerfile": "FROM debian:stable\nMAINTAINER crusoe@ucdavis.edu\n\nENV PACKAGES python-dev zlib1g-dev libbz2-dev gcc git python-setuptools g++ make ca-certificates python-pip \n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends ${PACKAGES} && \\\n    apt-get clean\n\nWORKDIR /home\n\nRUN git clone --branch v2.0 https://github.com/dib-lab/khmer.git && \\\n    cd khmer && \\\n    make install-dep && \\\n    python setup.py build_ext --include-dirs third-party/seqan/core/include:third-party/smhasher:lib --libraries z,bz2 install\n"
                }
            }
        ], 
        "name": "khmer", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": null, 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fmr_c%252Fkhmer", 
        "contains": [], 
        "meta-version": "2015-12-18 18:10:07.567", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "mr_c", 
        "registry-id": "quay.io/mr_c/khmer", 
        "description": ""
    }, 
    {
        "versions": [
            {
                "name": "latest", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats/version/latest", 
                "image": "quay.io/briandoconnor/dockstore-tool-bamstats:latest", 
                "meta-version": "2015-11-03 21:40:15.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/develop/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information.\"\nid: \"BAMStats\"\nlabel: \"BAMStats tool\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: Brian O'Connor\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/briandoconnor/dockstore-tool-bamstats:1.25-2\"\n  - { import: node-engine.cwl }\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 1\n    ramMin: 4092\n    outdirMin: 512000\n    description: \"the process requires at least 4G of RAM\"\n\ninputs:\n  - id: \"#mem_gb\"\n    type: int\n    default: 4\n    description: \"The memory, in GB, for the reporting tool\"\n    inputBinding:\n      position: 1\n\n  - id: \"#bam_input\"\n    type: File\n    description: \"The BAM file used as input, it must be sorted.\"\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: \"#bamstats_report\"\n    type: File\n    outputBinding:\n      glob: bamstats_report.zip\n    description: \"A zip file that contains the HTML report and various graphics.\"\n\nbaseCommand: [\"bash\", \"/usr/local/bin/bamstats\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/develop/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a sample tool container for BAMStats\n#############################################################\n\n# Set the base image to SeqWare\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y wget unzip openjdk-7-jre zip\n\n# get the tool\nRUN wget -q http://downloads.sourceforge.net/project/bamstats/BAMStats-1.25.zip\nRUN unzip BAMStats-1.25.zip && \\\n    rm BAMStats-1.25.zip && \\\n    mv BAMStats-1.25 /opt/\nCOPY bin/bamstats /usr/local/bin/\nRUN chmod a+x /usr/local/bin/bamstats\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "develop", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats/version/develop", 
                "image": "quay.io/briandoconnor/dockstore-tool-bamstats:develop", 
                "meta-version": "2015-11-03 21:40:13.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/develop/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information.\"\nid: \"BAMStats\"\nlabel: \"BAMStats tool\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: Brian O'Connor\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/briandoconnor/dockstore-tool-bamstats:1.25-2\"\n  - { import: node-engine.cwl }\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 1\n    ramMin: 4092\n    outdirMin: 512000\n    description: \"the process requires at least 4G of RAM\"\n\ninputs:\n  - id: \"#mem_gb\"\n    type: int\n    default: 4\n    description: \"The memory, in GB, for the reporting tool\"\n    inputBinding:\n      position: 1\n\n  - id: \"#bam_input\"\n    type: File\n    description: \"The BAM file used as input, it must be sorted.\"\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: \"#bamstats_report\"\n    type: File\n    outputBinding:\n      glob: bamstats_report.zip\n    description: \"A zip file that contains the HTML report and various graphics.\"\n\nbaseCommand: [\"bash\", \"/usr/local/bin/bamstats\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/develop/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a sample tool container for BAMStats\n#############################################################\n\n# Set the base image to SeqWare\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y wget unzip openjdk-7-jre zip\n\n# get the tool\nRUN wget -q http://downloads.sourceforge.net/project/bamstats/BAMStats-1.25.zip\nRUN unzip BAMStats-1.25.zip && \\\n    rm BAMStats-1.25.zip && \\\n    mv BAMStats-1.25 /opt/\nCOPY bin/bamstats /usr/local/bin/\nRUN chmod a+x /usr/local/bin/bamstats\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "1.25-1", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats/version/1.25-1", 
                "image": "quay.io/briandoconnor/dockstore-tool-bamstats:1.25-1", 
                "meta-version": "2015-10-26 23:58:45.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25-1/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information.\"\nid: \"BAMStats\"\nlabel: \"BAMStats tool\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: Brian O'Connor\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/briandoconnor/dockstore-tool-bamstats:1.25-1\"\n  - { import: node-engine.cwl }\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 1\n    ramMin: 4092\n    outdirMin: 512000\n    description: \"the process requires at least 4G of RAM\"\n\ninputs:\n  - id: \"#bam_input\"\n    type: File\n    description: \"The BAM file used as input, it must be sorted.\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#bamstats_report\"\n    type: File\n    outputBinding:\n      glob: bamstats_report.zip\n    description: \"A zip file that contains the HTML report and various graphics.\"\n\nbaseCommand: [\"bash\", \"/usr/local/bin/bamstats\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25-1/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a sample tool container for BAMStats\n#############################################################\n\n# Set the base image to SeqWare\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y wget unzip openjdk-7-jre zip\n\n# get the tool\nRUN wget -q http://downloads.sourceforge.net/project/bamstats/BAMStats-1.25.zip\nRUN unzip BAMStats-1.25.zip && \\\n    rm BAMStats-1.25.zip && \\\n    mv BAMStats-1.25 /opt/\nCOPY bin/bamstats /usr/local/bin/\nRUN chmod a+x /usr/local/bin/bamstats\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "1.25", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats/version/1.25", 
                "image": "quay.io/briandoconnor/dockstore-tool-bamstats:1.25", 
                "meta-version": "2015-10-26 23:39:50.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information.\"\nid: \"BAMStats\"\nlabel: \"BAMStats tool\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: Brian O'Connor\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/briandoconnor/dockstore-tool-bamstats:1.25\"\n  - { import: node-engine.cwl }\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 1\n    ramMin: 4092\n    outdirMin: 512000\n    description: \"the process requires at least 4G of RAM\"\n\ninputs:\n  - id: \"#bam_input\"\n    type: File\n    description: \"The BAM file used as input, it must be sorted.\"\n    inputBinding:\n      position: 1\n\noutputs:\n  - id: \"#bamstats_report\"\n    type: File\n    outputBinding:\n      glob: bamstats_report.zip\n    description: \"A zip file that contains the HTML report and various graphics.\"\n\nbaseCommand: [\"bash\", \"/usr/local/bin/bamstats\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a sample tool container for BAMStats\n#############################################################\n\n# Set the base image to SeqWare\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y wget unzip openjdk-7-jre zip\n\n# get the tool\nRUN wget -q http://downloads.sourceforge.net/project/bamstats/BAMStats-1.25.zip\nRUN unzip BAMStats-1.25.zip && \\\n    rm BAMStats-1.25.zip && \\\n    mv BAMStats-1.25 /opt/\nCOPY bin/bamstats /usr/local/bin/\nRUN chmod a+x /usr/local/bin/bamstats\nCMD [\"/bin/bash\"]\n"
                }
            }, 
            {
                "name": "1.25-2", 
                "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats/version/1.25-2", 
                "image": "quay.io/briandoconnor/dockstore-tool-bamstats:1.25-2", 
                "meta-version": "2015-11-03 17:48:53.0", 
                "descriptor": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25-2/Dockstore.cwl", 
                    "descriptor": "#!/usr/bin/env cwl-runner\n\nclass: CommandLineTool\ndescription: \"A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information.\"\nid: \"BAMStats\"\nlabel: \"BAMStats tool\"\n\ndct:creator:\n  \"@id\": \"http://orcid.org/0000-0002-7681-6415\"\n  foaf:name: Brian O'Connor\n  foaf:mbox: \"mailto:briandoconnor@gmail.com\"\n\nrequirements:\n  - class: DockerRequirement\n    dockerPull: \"quay.io/briandoconnor/dockstore-tool-bamstats:1.25-1\"\n  - { import: node-engine.cwl }\n\nhints:\n  - class: ResourceRequirement\n    coresMin: 1\n    ramMin: 4092\n    outdirMin: 512000\n    description: \"the process requires at least 4G of RAM\"\n\ninputs:\n  - id: \"#mem_gb\"\n    type: int\n    default: 4\n    description: \"The memory, in GB, for the reporting tool\"\n    inputBinding:\n      position: 1\n\ninputs:\n  - id: \"#bam_input\"\n    type: File\n    description: \"The BAM file used as input, it must be sorted.\"\n    inputBinding:\n      position: 2\n\noutputs:\n  - id: \"#bamstats_report\"\n    type: File\n    outputBinding:\n      glob: bamstats_report.zip\n    description: \"A zip file that contains the HTML report and various graphics.\"\n\nbaseCommand: [\"bash\", \"/usr/local/bin/bamstats\"]\n"
                }, 
                "registry-id": null, 
                "dockerfile": {
                    "url": "https://raw.githubusercontent.com/briandoconnor/dockstore-tool-bamstats/1.25-2/Dockerfile", 
                    "dockerfile": "#############################################################\n# Dockerfile to build a sample tool container for BAMStats\n#############################################################\n\n# Set the base image to SeqWare\nFROM ubuntu:14.04\n\n# File Author / Maintainer\nMAINTAINER Brian O'Connor <briandoconnor@gmail.com>\n\n# Setup packages\nUSER root\nRUN apt-get -m update && apt-get install -y wget unzip openjdk-7-jre zip\n\n# get the tool\nRUN wget -q http://downloads.sourceforge.net/project/bamstats/BAMStats-1.25.zip\nRUN unzip BAMStats-1.25.zip && \\\n    rm BAMStats-1.25.zip && \\\n    mv BAMStats-1.25 /opt/\nCOPY bin/bamstats /usr/local/bin/\nRUN chmod a+x /usr/local/bin/bamstats\nCMD [\"/bin/bash\"]\n"
                }
            }
        ], 
        "name": "dockstore-tool-bamstats", 
        "tooltype": {
            "description": "CWL described CommandLineTool", 
            "id": "0", 
            "name": "CommandLineTool"
        }, 
        "author": "Brian O'Connor", 
        "global-id": "https://www.dockstore.org:8443/tools/quay.io%252Fbriandoconnor%252Fdockstore-tool-bamstats", 
        "contains": [], 
        "meta-version": "2016-05-10 06:13:12.894", 
        "toolname": "", 
        "registry": "QUAY_IO", 
        "organization": "briandoconnor", 
        "registry-id": "quay.io/briandoconnor/dockstore-tool-bamstats", 
        "description": "A Docker container for the BAMStats command. See the [BAMStats](http://bamstats.sourceforge.net/) website for more information."
    }
]